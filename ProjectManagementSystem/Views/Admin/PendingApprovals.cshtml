@model List<ProjectManagementSystem.Models.ApproverTaskViewModel>

@{
    ViewBag.Title = "Approvals";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold text-purple">Approval Requests</h2>
        <p class="text-muted">Manage task approvals across all projects and divisions.</p>
    </div>
    <ul class="nav nav-tabs custom-tabs" id="approvalsTab" role="tablist">
        <li class="nav-item" title="Tasks awaiting your approval">
            <a class="nav-link active" id="pending-tab" data-bs-toggle="tab" href="#pending" role="tab">Pending</a>
        </li>
        <li class="nav-item" title="Tasks you've already approved">
            <a class="nav-link" id="approved-tab" data-bs-toggle="tab" href="#approved" role="tab">Approved</a>
        </li>
        <li class="nav-item" title="Tasks you've rejected">
            <a class="nav-link" id="rejected-tab" data-bs-toggle="tab" href="#rejected" role="tab">Rejected</a>
        </li>
    </ul>
    <br />
    <div class="tab-content p-4 bg-white rounded border shadow-sm" id="approvalsTabContent">
        <div class="mb-3 d-flex justify-content-between align-items-center">
            <select id="divisionFilter" class="form-select w-auto">
                <option value="">All Divisions</option>
            </select>
            <div id="bulkActions" class="d-none">
                <span id="selectedCount" class="me-3 text-muted small"></span>
                <button class="btn btn-sm btn-success" id="bulkApprove" style="font-size: 12px;" title="Approve all selected tasks">Approve All</button>
                <button class="btn btn-sm btn-danger" id="bulkReject" style="font-size: 12px;" title="Reject all selected tasks">Reject All</button>
            </div>
        </div>
        <div class="tab-pane fade show active" id="pending" role="tabpanel">
            <div class="d-flex justify-content-end mb-3 pe-2">
                <div class="btn-group view-toggle" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm" style="font-size: 12px;" id="listViewBtn" title="Switch to list view">
                        <i class="fas fa-list"></i> List View
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" style="font-size: 12px;" id="gridViewBtn" title="Switch to grid view">
                        <i class="fas fa-th-large"></i> Grid View
                    </button>
                </div>
            </div>
            <div id="loadingSpinner" class="text-center my-4 d-none">
                <div class="spinner-border text-purple" role="status">
                    <span class="visually-hidden"></span>
                </div>
            </div>
            <div id="pendingCardWrapper">
                <div id="pendingCardView" class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 flex-column-reverse flex-md-row"></div>
            </div>
            <div id="pendingListViewContainer" class="d-none">
                <div class="table-responsive" style="max-height: 500px;">
                    <table id="pendingListView" class="table table-striped table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th><input type="checkbox" id="selectAll"></th>
                                <th>Task</th>
                                <th>Submitted By</th>
                                <th>Date</th>
                                <th>Attachment</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="approved" role="tabpanel">
            <div class="row g-3" id="approvedTasks"></div>
        </div>
        <div class="tab-pane fade" id="rejected" role="tabpanel">
            <div class="row g-3" id="rejectedTasks"></div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>

<script>

function formatDate(jsonDate) {
    if (!jsonDate) return "-";
    const timestamp = parseInt(jsonDate.replace(/[^0-9]/g, ''));
    return new Date(timestamp).toLocaleDateString('en-PH', {
        year: 'numeric', month: 'short', day: 'numeric'
    });
}

function createTaskCard(task) {
    //console.log("DEBUG: Task values for link", {
    //    ProjectMainId: task.ProjectMainId,
    //    ProjectTitle: task.ProjectTitle,
    //    DetailsID: task.DetailsID,
    //    MilestoneID: task.MilestoneID
    //});

    const formattedDate = formatDate(task.SubmittedDate);
    const attachment = task.AttachmentUrl
        ? `<a href="${task.AttachmentUrl}" target="_blank" class="attachment-link" title="View attachment"><i class="fas fa-paperclip"></i> View File</a>`
        : `<span class="text-muted small fst-italic">No attachment</span>`;

    return `
        <div class="col-md-4">
            <div class="card task-card p-3">
                <div class="card-body">
                    <h5 class="fw-bold mb-2 text-center">
                        <a href="/Checklist/weeklyMilestone?id=${task.ProjectMainId}&title=${encodeURIComponent(task.ProjectTitle)}&tab=checklist&checklistId=${task.DetailsID}&milestone=${task.MilestoneID}"
                           class="text-purple text-decoration-none task-title-link"
                           target="_blank"
                           title="Click to view this task's checklist">
                           ${task.TaskName}
                        </a>
                    </h5>
                    <p class="mb-1 small"><strong>Submitted By:</strong> ${task.SubmittedBy}</p>
                    <p class="mb-1 small"><strong>Division:</strong> ${task.DivisionName || 'N/A'}</p>
                    <p class="mb-1 small"><strong>Submitted On:</strong> ${formattedDate}</p>
                    <p class="mb-2 small">${attachment}</p>
                    <div class="d-flex gap-2">
                        ${task.ShowActions ? `
                             <button class="btn btn-reject reject-btn" data-taskid="${task.DetailsID}" aria-label="Reject Task">Reject</button>
                             <button class="btn btn-approve approve-btn" data-taskid="${task.DetailsID}" aria-label="Approve Task">Approve</button>
                             ` : ``}
                        ${task.ShowWithdraw ? `
                             <button class="btn btn-approve withdraw-btn" data-taskid="${task.DetailsID}" aria-label="">Withdraw</button>
                             ` : ``}
                    </div>
                </div>
            </div>
        </div>`;
}

function toggleBulkActions() {
    const selectedCount = $("#pendingListView tbody input[type='checkbox']:checked").length;
    $("#bulkActions").toggleClass("d-none", selectedCount === 0);
    $("#pendingListView .approve-btn, #pendingListView .reject-btn").toggleClass("d-none", selectedCount > 0);
    $("#selectedCount").text(selectedCount > 0 ? `${selectedCount} task${selectedCount > 1 ? "s" : ""} selected` : "");
}

function getSelectedTaskIds() {
    return $("#pendingListView tbody input[type='checkbox']:checked")
        .map(function () { return $(this).data("taskid"); })
        .get();
}

function loadApprovals() {
    $("#loadingSpinner").removeClass("d-none");

    $.get('@Url.Action("GetApprovals", "Admin")', function (data) {
        const listBody = $("#pendingListView tbody").empty();
        const cardView = $("#pendingCardView").empty();
        const approved = $("#approvedTasks").empty();
        const rejected = $("#rejectedTasks").empty();

        if (data.pending.length === 0) {
            listBody.append(`<tr><td colspan="6" class="text-center text-muted">No pending approvals found.</td></tr>`);
            cardView.append(`<div class="col-12 text-center text-muted">No pending approvals to display.</div>`);
        }

        data.pending.forEach(task => {
            task.ShowActions = true;
            const formattedDate = formatDate(task.SubmittedDate);
            listBody.append(`
                <tr>
                    <td><input type="checkbox" data-taskid="${task.DetailsID}"></td>
                    <td><a href="/Checklist/weeklyMilestone?id=${task.ProjectMainId}&title=${encodeURIComponent(task.ProjectTitle)}&tab=checklist&checklistId=${task.DetailsID}&milestone=${task.MilestoneID}" target="_blank">${task.TaskName}</a></td>
                    <td>${task.SubmittedBy}</td>
                    <td>${formattedDate}</td>
                    <td>${task.AttachmentUrl ? `<a href="${task.AttachmentUrl}" class="attachment-link">View File</a>` : "<span class='text-muted small fst-italic'>No attachment</span>"}</td>
                    <td>
                        <button class="btn btn-approve approve-btn" data-taskid="${task.DetailsID}">Approve</button>
                        <button class="btn btn-reject reject-btn" data-taskid="${task.DetailsID}">Reject</button>
                    </td>

                </tr>`);
            cardView.append(createTaskCard(task));
        });

        if (data.approved.length === 0) {
            approved.append(`<div class="col-12 text-center text-muted">No approved tasks to display.</div>`);
        } else {
            data.approved.forEach(task => {
                task.ShowActions = false;
                task.ShowWithdraw = true;
                approved.append(createTaskCard(task));

            });
        }

        if (data.rejected.length === 0) {
            rejected.append(`<div class="col-12 text-center text-muted">No rejected tasks to display.</div>`);
        } else {
            data.rejected.forEach(task => {
                task.ShowActions = false;
                task.ShowWithdraw = true;
                rejected.append(createTaskCard(task));
            });
        }

        if ($.fn.DataTable.isDataTable('#pendingListView')) {
            $('#pendingListView').DataTable().clear().destroy();
        }

        $('#pendingListView').DataTable({
            paging: true,
            searching: true,
            info: false,
            ordering: false,
            pageLength: 5,
            responsive: true,
            dom: '<"row align-items-center mb-2"<"col-sm-6"l><"col-sm-6 text-end"f>>rt<"row mt-3"<"col-sm-6"i><"col-sm-6 text-end"p>>',
            language: {
                search: "_INPUT_",
                searchPlaceholder: "Search tasks...",
                lengthMenu: "_MENU_ entries per page"
            }
        });
    }).always(() => {
        $("#loadingSpinner").addClass("d-none");
    });
}

$(document).ready(function () {
    loadApprovals();

    const urlParams = new URLSearchParams(window.location.search);
    const milestoneFromUrl = urlParams.get("milestone");

    if (milestoneFromUrl) {
        setTimeout(() => {
            const dropdown = document.getElementById("milestoneDropdown");
            const options = [...dropdown.options];
            const matchingOption = options.find(opt => opt.value == milestoneFromUrl);
            if (matchingOption) {
                dropdown.value = matchingOption.value;
                dropdown.dispatchEvent(new Event("change"));
            }
        }, 800);
    }

    $("#listViewBtn").click(function () {
        $('#pendingCardWrapper').addClass('d-none');
        $('#pendingListViewContainer').removeClass('d-none');
        $("#selectAll").prop("checked", false);
        $("#pendingListView tbody input[type='checkbox']").prop("checked", false);
        $("#pendingListView .approve-btn, #pendingListView .reject-btn").removeClass("d-none");
        toggleBulkActions();
    });

    $("#gridViewBtn").click(function () {
        $('#pendingListViewContainer').addClass('d-none');
        $('#pendingCardWrapper').removeClass('d-none');
        $('#bulkActions').addClass('d-none');
    });

    $(document).on("click", ".approve-btn", function () {
        const taskId = $(this).data("taskid");

        Swal.fire({
            title: "You're about to approve this task.",
            html: `<p style="font-size: 16px; color: #555;">Please make sure all requirements are met before confirming.</p>`,
            icon: "question",
            showCancelButton: true,
            cancelButtonText: "Cancel",
            confirmButtonText: "Approve",
            confirmButtonColor: "#66339A",
            background: "#fff",
            color: "#333"
        }).then(result => {
            if (result.isConfirmed) {

                // Show loading screen
                Swal.fire({
                    title: "Processing...",
                    text: "Approving task, please wait...",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Perform the AJAX request
                $.post('@Url.Action("ApproveTask", "Admin")', { taskId })
                    .done(res => {
                        Swal.close(); // Close loading spinner

                        if (res.success) {
                            triggerConfetti(); // optional animation
                            Swal.fire({
                                title: "Task Approved 🎉",
                                text: "This task has been successfully approved.",
                                icon: "success",
                                timer: 3000,
                                timerProgressBar: true,
                                showConfirmButton: false,
                                background: "#ffffff",
                                color: "#333"
                            }).then(loadApprovals);
                        } else {
                            Swal.fire({
                                title: "Failed",
                                text: "Could not approve task.",
                                icon: "error",
                                confirmButtonColor: "#66339A"
                            });
                        }
                    })
                    .fail(() => {
                        Swal.close(); // Ensure loading spinner is closed
                        Swal.fire({
                            title: "Error",
                            text: "Approval failed due to a server error.",
                            icon: "error",
                            confirmButtonColor: "#66339A"
                        });
                    });
            }
        });
    });


    $(document).on("click", ".reject-btn", function () {
        const taskId = $(this).data("taskid");
        Swal.fire({
            title: "Reject Task?",
            html: '<p style="font-size: 14px; color: #555;">Please provide a reason for rejecting this task.</p>',
            input: "text",
            inputPlaceholder: "e.g., Missing proof of completion",
            inputAttributes: {
                style: "font-size: 14px;"
            },
            showCancelButton: true,
            confirmButtonText: "Reject"
        }).then(result => {
            if (result.isConfirmed && result.value.trim()) {
                // Show loading modal
                Swal.fire({
                    title: "Processing...",
                    text: "Rejecting task, please wait...",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Perform the POST request
                $.post('@Url.Action("RejectTask", "Admin")', {
                    taskId,
                    reason: result.value.trim()
                }).done(res => {
                    Swal.close(); // Close the loading spinner

                    if (res.success) {
                        Swal.fire("Rejected", "Task rejected.", "success")
                            .then(loadApprovals);
                    } else {
                        Swal.fire("Failed", "Could not reject the task.", "error");
                    }
                }).fail(() => {
                    Swal.close(); // Close spinner even on failure
                    Swal.fire("Error", "Rejection failed due to a server error.", "error");
                });
            }
        });
    });


    
    $(document).on("click", ".withdraw-btn", function () {
    const taskId = $(this).data("taskid");
    Swal.fire({
        title: "Withdraw Task?",
        html: '<p style="font-size: 14px; color: #555;">Please provide a reason for withdrawing this task.</p>',
        input: "text",
        inputPlaceholder: "e.g., Change of mind",
        inputAttributes: {
            style: "font-size: 14px;"
        },
        showCancelButton: true,
        confirmButtonText: "Withdraw"
        }).then(result => {
            if (result.isConfirmed && result.value.trim()) {
                // Show loading screen
                Swal.fire({
                    title: "Processing...",
                    text: "Please wait",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Perform the AJAX POST
                $.post('@Url.Action("WithdrawTask", "Admin")', {
                    taskId,
                    reason: result.value.trim()
                }).done(res => {
                    Swal.close(); // Close loading

                    if (res.success) {
                        Swal.fire("Withdrawn", "Task successfully withdrawn.", "success")
                            .then(loadApprovals);
                    } else {
                        Swal.fire("Failed", "Could not withdraw task.", "error");
                    }
                }).fail(() => {
                    Swal.close(); // Close loading on failure
                    Swal.fire("Error", "Withdraw failed due to server error.", "error");
                });
            }
        });
    });

    $(document).on("change", "#selectAll", function () {
        const isChecked = $(this).is(":checked");
        $("#pendingListView tbody input[type='checkbox']").prop("checked", isChecked);
        toggleBulkActions();
    });

    $(document).on("change", "#pendingListView tbody input[type='checkbox']", toggleBulkActions);
    });

    function triggerConfetti() {
        const confettiCanvas = document.createElement('canvas');
        confettiCanvas.style.position = 'fixed';
        confettiCanvas.style.top = 0;
        confettiCanvas.style.left = 0;
        confettiCanvas.style.width = '100vw';
        confettiCanvas.style.height = '100vh';
        confettiCanvas.style.pointerEvents = 'none';
        confettiCanvas.style.zIndex = 11000; 
        document.body.appendChild(confettiCanvas);

        const myConfetti = confetti.create(confettiCanvas, {
            resize: true,
            useWorker: true
        });

        myConfetti({
            particleCount: 80,
            spread: 70,
            origin: { y: 0.6 },
            colors: ['#66339A', '#A066C9', '#FFD700', '#88D8B0']
        });

        setTimeout(() => {
            document.body.removeChild(confettiCanvas);
        }, 5000);
    }

</script>


<style>
    .custom-tabs {
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: center;
        gap: 30px;
        padding-bottom: 5px;
    }

        .custom-tabs .nav-link {
            font-size: 16px;
            font-weight: 500;
            color: #9c9c9c;
            border: none;
            padding: 10px 15px;
        }

    .custom-tabs .nav-link.active {
        color: #6f42c1;
        font-weight: 600;
        border-bottom: 2px solid #6f42c1;
    }

    .task-card {
        border-radius: 12px;
        background-color: #fff;
        border: 1px solid #e0e0e0;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: box-shadow 0.3s ease;
        margin-bottom: 20px;
        width:100%;
    }

        .task-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
        }

    .view-toggle .btn {
        font-size: 13px;
        padding: 5px 10px;
        height: 32px;
        display: flex;
        align-items: center;
        gap: 4px;
        transition: background-color 0.2s ease, border-color 0.2s ease;
    }

        .view-toggle .btn:hover {
            background-color: #f5f5f5;
            border-color: #ccc;
        }

    .task-title-link {
        border-bottom: 1px solid transparent;
        transition: border-bottom 0.2s ease;
    }

        .task-title-link:hover {
            border-bottom: 1px solid #6f42c1;
            cursor: pointer;
        }

    .attachment-link {
        font-size: 13px;
        display: inline-flex;
        align-items: center;
        gap: 5px;
        color: #6f42c1;
        text-decoration: none;
    }

        .attachment-link:hover {
            text-decoration: underline;
        }

    .no-attachment {
        font-size: 12px;
        color: #999;
        font-style: italic;
    }

    #pendingListView th,
    #pendingListView td {
        vertical-align: middle;
        padding: 10px 12px;
    }

        #pendingListView td:nth-child(1) a {
            font-weight: 500;
            color: #6f42c1;
            text-decoration: none;
            transition: all 0.2s ease;
        }

            #pendingListView td:nth-child(1) a:hover {
                text-decoration: underline;
            }

    #pendingListView .btn {
        font-size: 13px;
        padding: 4px 10px;
        width: 36px;
        display: inline-flex;
        justify-content: center;
        align-items: center;
    }

        #pendingListView .btn + .btn {
            margin-left: 6px;
        }

    .dataTables_wrapper .form-control {
        font-size: 14px;
        padding: 0.25rem 0.5rem;
    }

    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter {
        margin-bottom: 0.5rem;
    }

    .dataTables_filter input,
    .dataTables_length select {
        border-radius: 6px;
        padding: 6px 10px;
        font-size: 14px;
    }

    .dataTables_paginate .page-item .page-link {
        padding: 6px 12px;
        font-size: 13px;
        border-radius: 6px;
        margin: 0 2px;
        color: #6f42c1;
        border: 1px solid #dee2e6;
        transition: background-color 0.2s ease;
    }

    .dataTables_paginate .page-item.active .page-link {
        background-color: #6f42c1;
        color: #fff;
        border-color: #6f42c1;
    }

    .dataTables_paginate .page-item .page-link:hover {
        background-color: #f0e8ff;
    }

    /*Optional: Division badge styling (uncomment to use)*/
    .badge-division {
        display: inline-block;
        padding: 4px 8px;
        background-color: #f8f9fa;
        color: #333;
        font-size: 12px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }
    .btn-approve {
        background-color: #66399A;
        color: white;
        border: none;
        border-radius: 20px;
        font-size: 13px;
        padding: 6px 14px;
        width: 100%;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    }

        .btn-approve:hover {
            background-color: #552788;
            transform: scale(1.03);
            box-shadow: 0 4px 12px rgba(102, 51, 154, 0.25);
            color: white;
        }

    .btn-reject {
        background-color: #D6C5E0; 
        color: #66399A;
        border: none;
        border-radius: 20px;
        font-size: 13px;
        padding: 6px 14px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

        .btn-reject:hover {
            background-color: #cbb3db;
        }
    #pendingCardView .col-md-4 {
        display: flex;
    }
</style> 