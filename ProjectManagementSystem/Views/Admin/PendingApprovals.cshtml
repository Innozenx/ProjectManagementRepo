@model IEnumerable<ProjectManagementSystem.Models.ApproverTaskViewModel>

@{
    ViewBag.Title = "Approvals";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var dummyTasks = new List<ProjectManagementSystem.Models.ApproverTaskViewModel>
    {
        new ProjectManagementSystem.Models.ApproverTaskViewModel
        {
            DetailsID = 1,
            TaskName = "Project Proposal",
            ProjectTitle = "Project Management System",
            SubmittedBy = "Crystal Joyce Benauro",
            SubmittedDate = DateTime.Now.AddDays(-1),
            AttachmentID = 101,
            FilePath = "/uploads/project_plan.pdf",
            ApprovedCount = 1,
            TotalApprovers = 3,
            ApprovedByUsers = new List<string> { "Yas Afdal" }
        },
        new ProjectManagementSystem.Models.ApproverTaskViewModel
        {
            DetailsID = 2,
            TaskName = "Asset Transfer",
            ProjectTitle = "Asset Management Phase 2",
            SubmittedBy = "Jantroy Yparraguirre",
            SubmittedDate = DateTime.Now.AddDays(-2),
            AttachmentID = 102,
            FilePath = "/uploads/asset_transfer.pdf",
            ApprovedCount = 2,
            TotalApprovers = 2,
            ApprovedByUsers = new List<string> { "Mark Reformo", "Yas Afdal" }
        },
        new ProjectManagementSystem.Models.ApproverTaskViewModel
        {
            DetailsID = 3,
            TaskName = "UI/UX Review",
            ProjectTitle = "Project Management System",
            SubmittedBy = "Jantroy Yparraguirre",
            SubmittedDate = DateTime.Now.AddHours(-5),
            AttachmentID = null,
            FilePath = "",
            ApprovedCount = 0,
            TotalApprovers = 2,
            ApprovedByUsers = new List<string>()
        }
    };

    var tasksToShow = Model != null && Model.Any() ? Model : dummyTasks;
}

<div class="container mt-4">
    <div class="card shadow-sm p-4 rounded-3 bg-white">
        <h2 class="text-purple fw-bold mb-4"><i class="fas fa-check-circle"></i> Pending Approvals</h2>
        <p class="text-muted">Review and approve/reject tasks submitted for approval.</p>

        @if (tasksToShow.Any())
        {
            <div class="row g-4">
                @foreach (var task in tasksToShow)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="card task-card shadow-sm border-0">
                            <div class="card-body">
                                <h5 class="fw-bold text-dark">@task.TaskName</h5>
                                <p class="small text-muted"><i class="fas fa-project-diagram"></i> @task.ProjectTitle</p>

                                <p class="small">
                                    <i class="fas fa-user-check"></i> <b>Approved:</b> @task.ApprovedCount / @task.TotalApprovers
                                </p>

                                @if (task.ApprovedByUsers.Any())
                                {
                                    <p class="small text-muted">
                                        <i class="fas fa-users"></i> Approved By:
                                        <span class="fw-semibold">@string.Join(", ", task.ApprovedByUsers)</span>
                                    </p>
                                }

                                <p class="small"><i class="far fa-calendar-alt"></i> <b>Submitted On:</b> @task.SubmittedDate.ToString("yyyy-MM-dd HH:mm")</p>

                                <!-- Show Rejection Reason -->
                                @if (!string.IsNullOrEmpty(task.RejectReason))
                                {
                                    <p class="small text-danger"><i class="fas fa-exclamation-circle"></i> <b>Rejection Reason:</b> @task.RejectReason</p>
                                }

                                @if (!string.IsNullOrEmpty(task.FilePath))
                                {
                                    <div class="text-center my-3">
                                        <a href="@Url.Action("DownloadAttachment", "Admin", new { id = task.AttachmentID })" class="btn btn-outline-success btn-sm w-100">
                                            <i class="fas fa-download"></i> Download
                                        </a>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-center"><span class="badge bg-secondary">No Attachment</span></p>
                                }

                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-success approve-btn w-50" data-taskid="@task.DetailsID">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                    <button class="btn btn-danger reject-btn w-50" data-taskid="@task.DetailsID">
                                        <i class="fas fa-times"></i> Reject
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center text-muted mt-4">
                <p><i class="fas fa-info-circle"></i> No tasks require approval at the moment.</p>
            </div>
        }
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    $(document).ready(function () {
       
        $(".approve-btn").click(function () {
            let taskId = $(this).data("taskid");

            Swal.fire({
                title: "Approve Task?",
                text: "Are you sure you want to approve this task?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Approve",
                cancelButtonText: "Cancel",
                allowOutsideClick: false,
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post("@Url.Action("ApproveTask", "Admin")", { taskId: taskId })
                        .done(response => {
                            Swal.close();
                            if (response.success) {
                                Swal.fire("Success", "Task approved successfully!", "success").then(() => location.reload());
                            } else {
                                Swal.fire("Error", response.message, "error");
                            }
                        })
                        .fail(() => Swal.fire("Error", "Failed to approve task.", "error"));
                }
            });
        });

        let taskIdToReject = null;
        $(".reject-btn").click(function () {
            taskIdToReject = $(this).data("taskid");
            $("#rejectTaskModal").modal("show");
        });

        $("#confirmRejectBtn").click(function () {
            let reason = $("#rejectReason").val().trim();
            if (!reason) {
                Swal.fire("Warning", "Please provide a reason for rejection.", "warning");
                return;
            }

            $.post("@Url.Action("RejectTask", "Admin")", { taskId: taskIdToReject, reason: reason })
                .done(response => {
                    if (response.success) {
                        Swal.fire("Rejected", "Task has been rejected.", "success").then(() => location.reload());
                    } else {
                        Swal.fire("Error", response.message, "error");
                    }
                })
                .fail(() => Swal.fire("Error", "Failed to reject task.", "error"));

            $("#rejectTaskModal").modal("hide");
        });
    });
</script>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa;
    }

    .text-purple {
        color: #6f42c1;
    }

    .task-card {
        border-radius: 12px;
        padding: 15px;
        border-left: 5px solid #6f42c1; 
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        background-color: #ffffff; 
    }

        /*.task-card:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }*/

    .btn {
        transition: all 0.2s ease-in-out;
    }

    .btn-success {
        background-color: #28a745;
        border: none;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-outline-success {
        border-color: #28a745;
        color: #28a745;
    }

        .btn-outline-success:hover {
            background-color: #28a745;
            color: white;
        }

</style>
