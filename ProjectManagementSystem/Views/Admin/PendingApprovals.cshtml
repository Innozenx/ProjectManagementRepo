@model List<ProjectManagementSystem.Models.ApproverTaskViewModel>

@{
    ViewBag.Title = "Approvals";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

    <div class="container mt-5">
        <div class="text-center mb-4">
            <h2 class="fw-bold text-purple">Approvals</h2>
        </div>
       
        <ul class="nav nav-tabs custom-tabs" id="approvalsTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="pending-tab" data-bs-toggle="tab" href="#pending" role="tab">Pending</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="approved-tab" data-bs-toggle="tab" href="#approved" role="tab">Approved</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="rejected-tab" data-bs-toggle="tab" href="#rejected" role="tab">Rejected</a>
            </li>
        </ul>

        <div class="tab-content p-4 bg-white rounded border" id="approvalsTabContent">
            <div class="tab-pane fade show active" id="pending" role="tabpanel">
                <div class="row g-4" id="pendingTasks">
                </div>
            </div>

            <div class="tab-pane fade" id="approved" role="tabpanel">
                <div class="row g-4" id="approvedTasks">
             
                </div>
            </div>

            <div class="tab-pane fade" id="rejected" role="tabpanel">
                <div class="row g-4" id="rejectedTasks">
                </div>
            </div>
        </div>
    </div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    function loadPendingApprovals() {
        $.get("@Url.Action("GetPendingApprovals", "Admin")", function (data) {
            let pendingContainer = $("#pendingTasks");
            let approvedContainer = $("#approvedTasks");
            let rejectedContainer = $("#rejectedTasks");

            pendingContainer.empty();
            approvedContainer.empty();
            rejectedContainer.empty();

            if (data.length > 0) {
                data.forEach(task => {
                    let taskCard = `
                        <div class="col-lg-4 col-md-6">
                            <div class="card task-card shadow-sm border-0">
                                <div class="card-body">
                                    <h5 class="fw-bold text-dark">${task.TaskName}</h5>
                                    <p class="small"><i class="fas fa-user"></i> <b>Submitted By:</b> ${task.SubmittedBy}</p>
                                    <p class="small"><i class="fas fa-user-check"></i> <b>Approved:</b> ${task.ApprovedCount} / ${task.TotalApprovers}</p>
                                    <p class="small"><i class="far fa-calendar-alt"></i> <b>Submitted On:</b> ${task.SubmittedDate}</p>
                                    ${task.FilePath ? `<a href="@Url.Action("DownloadAttachment", "Admin")?id=${task.AttachmentID}" class="btn btn-outline-success btn-sm w-100 mb-2">
                                        <i class="fas fa-download"></i> Download
                                    </a>` : ""}
                                    <div class="d-flex justify-content-between mt-3 gap-2">
                                        <button class="btn btn-success approve-btn w-50" data-taskid="${task.DetailsID}">
                                            <i class="fas fa-check"></i> Approve
                                        </button>
                                        <button class="btn btn-danger reject-btn w-50" data-taskid="${task.DetailsID}">
                                            <i class="fas fa-times"></i> Reject
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    pendingContainer.append(taskCard);
                });
            } else {
                pendingContainer.append(`<p class="text-center text-muted">No pending approvals.`);
            }
        }).fail(() => {
            Swal.fire("Error", "Failed to load pending approvals.", "error");
        });
    }

    $(document).ready(function () {
        loadApprovals();

        $(document).on("click", ".approve-btn", function () {
            let taskId = $(this).data("taskid");

            Swal.fire({
                title: "Approve Task?",
                text: "Are you sure you want to approve this task?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Approve",
                cancelButtonText: "Cancel",
                allowOutsideClick: false,
            }).then((result) => {
                if (result.isConfirmed) {
                  $.post("@Url.Action("ApproveTask", "Admin")", { taskId: taskId })

                        .done(response => {
                            if (response.success) {
                                Swal.fire("Success", "Task approved successfully!", "success").then(() => loadApprovals());

                            } else {
                                Swal.fire("Error", response.message, "error");
                            }
                        })
                        .fail(() => Swal.fire("Error", "Failed to approve task.", "error"));
                }
            });
        });

        $(document).on("click", ".reject-btn", function () {
            let taskId = $(this).data("taskid");

            Swal.fire({
                title: "Reject Task?",
                text: "Provide a reason for rejection:",
                input: "text",
                showCancelButton: true,
                confirmButtonText: "Reject",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed && result.value.trim() !== "") {
             $.post("@Url.Action("RejectTask", "Admin")", { taskId: taskId, reason: result.value.trim() })

                        .done(response => {
                            if (response.success) {
                                Swal.fire("Rejected", "Task has been rejected.", "success").then(() => loadApprovals());

                            }
                        })
                        .fail(() => Swal.fire("Error", "Failed to reject task.", "error"));
                }
            });
        });
        });

        function loadApprovals() {
            $.get("@Url.Action("GetApprovals", "Admin")", function (data) {
                const pending = data.pending;
                const approved = data.approved;
                const rejected = data.rejected;

                const pendingContainer = $("#pendingTasks").empty();
                const approvedContainer = $("#approvedTasks").empty();
                const rejectedContainer = $("#rejectedTasks").empty();

                const createCard = (task, type) => {
                    return `
                        <div class="col-lg-4 col-md-6">
                            <div class="card task-card shadow-sm border-0">
                                <div class="card-body">
                                    <h5 class="fw-bold text-dark">${task.TaskName}</h5>
                                    <p class="small"><i class="fas fa-user"></i> <b>Submitted By:</b> ${task.SubmittedBy}</p>
                                    <p class="small"><i class="far fa-calendar-alt"></i> <b>Submitted On:</b> ${task.SubmittedDate}</p>
                                    ${type === "pending" ? `
                                        <div class="d-flex justify-content-between mt-3 gap-2">
                                            <button class="btn btn-success approve-btn w-50" data-taskid="${task.DetailsID}">
                                                <i class="fas fa-check"></i> Approve
                                            </button>
                                            <button class="btn btn-danger reject-btn w-50" data-taskid="${task.DetailsID}">
                                                <i class="fas fa-times"></i> Reject
                                            </button>
                                        </div>
                                    ` : ""}
                                </div>
                            </div>
                        </div>
                    `;
                };

                if (pending.length > 0) {
                    pending.forEach(t => pendingContainer.append(createCard(t, "pending")));
                } else {
                    pendingContainer.append(`<p class="text-center text-muted">No pending approvals.</p>`);
                }

                if (approved.length > 0) {
                    approved.forEach(t => approvedContainer.append(createCard(t, "approved")));
                } else {
                    approvedContainer.append(`<p class="text-center text-muted">No approved tasks yet.</p>`);
                }

                if (rejected.length > 0) {
                    rejected.forEach(t => rejectedContainer.append(createCard(t, "rejected")));
                } else {
                    rejectedContainer.append(`<p class="text-center text-muted">No rejected tasks yet.</p>`);
                }
            });
        }

    </script>

<style>
    .custom-tabs {
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: center;
        gap: 30px;
        padding-bottom: 5px;
    }

    .custom-tabs .nav-link {
        font-size: 16px;
        font-weight: 500;
        color: #9c9c9c;
        background: none;
        border: none;
        padding: 10px 15px;
        transition: all 0.3s ease-in-out;
    }

    .custom-tabs .nav-link.active {
        color: #6f42c1;
        font-weight: 600;
        border-bottom: 2px solid #6f42c1;
        transition: all 0.3s ease-in-out;
    }

    .task-card {
        border-radius: 12px;
        padding: 15px;
        background-color: #ffffff;
    }

    .gap-2 {
        gap: 10px;
    }
</style>
