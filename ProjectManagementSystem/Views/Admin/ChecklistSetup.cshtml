@model IEnumerable<ProjectManagementSystem.Models.ChecklistSettingsViewModel>
@{
    ViewBag.Title = "Checklist Setup";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var userRole = User.IsInRole("PMS_ODCP_ADMIN") ? "PMS_ODCP_ADMIN" :
                   User.IsInRole("PMS_PROJECT_OWNER") ? "PMS_PROJECT_OWNER" :
                   (User.IsInRole("PMS_PROJECT_MANAGER") ? "PMS_PROJECT_MANAGER" : "Unknown");

    var checklists = ViewBag.Checklists as List<ProjectManagementSystem.Models.ChecklistSettingsViewModel>;
}

<div class="container mt-5">
    @if (userRole == "PMS_ODCP_ADMIN")
    {
        <div class="card shadow-sm mb-4 p-4 bg-light">
            <h2 class="text-center text-purple">Checklist Setup</h2>
            <p class="text-center text-muted">Manage fixed checklists for divisions.</p>
        </div>

        <div class="card shadow-sm p-4 mb-4">
            <h4 class="text-purple">Create checklist</h4>
            <p class="text-muted mb-3">Select a division and assign fixed milestones that will be required for their checklist.</p>
            <div class="row">
                <div class="col-md-6">
                    <label for="divisionDropdown" class="form-label">Division</label>
                    <select id="divisionDropdown" class="form-select shadow-sm">
                        <option value="">Select Division</option>
                        @foreach (var division in ViewBag.Divisions)
                        {
                            <option value="@division">@division</option>
                        }
                    </select>
                </div>
                <div class="col-md-6 mt-4 mt-md-0">
                    <button id="clearSelection" class="btn btn-secondary w-100 shadow-sm" style="display:none;">Clear Selection</button>
                </div>
            </div>
            <div class="mt-3">
                <label for="milestoneChecklist" class="form-label">Milestones</label>
                <div id="milestoneChecklist" class="milestone-checklist border rounded p-3 bg-light">
                </div>
                <p id="noMilestonesMessage" class="text-muted mt-2 text-center" style="display: none;">
                    No milestones available for this division.
                </p>
            </div>
            <div class="d-flex justify-content-center mt-4 gap-2">
                <button id="saveChecklistButton" class="btn btn-primary shadow-sm px-4" style="display: none;">
                    Save 
                </button>
                <button id="updateChecklistButton" class="btn btn-warning shadow-sm px-4" style="display: none;">
                    Update
                </button>
            </div>
        </div>

        <div class="card shadow-sm p-4">
            <h4 class="text-purple">Saved Checklists</h4>
            <p class="text-muted">Review and manage your existing checklists.</p>
            <div class="table-responsive">
                <table class="table table-bordered table-hover shadow-sm">
                    <thead class="table-primary">
                        <tr class="text-center">
                            <th>Checklist Name</th>
                            <th>Division</th>
                            <th>Milestones</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (checklists != null && checklists.Any())
                        {
                            foreach (var checklist in checklists)
                            {
                                <tr>
                                    <td>@checklist.ChecklistName</td>
                                    <td>@checklist.Division</td>
                                    <td>
                                        <ul class="mb-0">
                                            @foreach (var milestone in checklist.Milestones)
                                            {
                                                <li>@milestone.MilestoneName</li>
                                            }
                                        </ul>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-danger delete-checklist-btn shadow-sm" data-id="@checklist.ChecklistId" title="Delete Checklist">
                                            <i class="fas fa-trash-alt"></i> 
                                        </button>

                                        <button class="btn btn-sm btn-primary edit-checklist-btn shadow-sm" data-id="@checklist.ChecklistId" data-division="@checklist.Division" title="Edit Checklist">
                                            <i class="fas fa-edit"></i> 
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">No checklists found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa;
    }

    .text-purple {
        color: #6f42c1;
    }

    .form-select, .form-control {
        font-size: 16px;
        border-radius: 5px;
        transition: all 0.3s ease-in-out;
    }

    .btn-primary {
        background-color: #6f42c1;
        border: none;
    }

        .btn-primary:hover {
            background-color: #583099;
        }

    .milestone-checklist {
        max-height: 250px;
        overflow-y: auto;
        background-color: #ffffff;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }

    .form-check-input:checked {
        background-color: #6f42c1;
        border-color: #6f42c1;
    }
</style>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const divisionDropdown = document.getElementById("divisionDropdown");
        const milestoneChecklist = document.getElementById("milestoneChecklist");
        const saveButton = document.getElementById("saveChecklistButton");
        const updateButton = document.getElementById("updateChecklistButton");
        const noMilestonesMessage = document.getElementById("noMilestonesMessage");
        const clearSelection = document.getElementById("clearSelection");

        let editingChecklistId = null;

        const toggleButtons = (isEditing) => {
            saveButton.style.display = isEditing ? "none" : "block";
            updateButton.style.display = isEditing ? "block" : "none";
            clearSelection.style.display = isEditing ? "block" : "none";
        };

        const fetchMilestones = (division, checklistId = null) => {
            milestoneChecklist.innerHTML = "";
            noMilestonesMessage.style.display = "none";

            fetch(`/Admin/GetMilestonesByDivision?division=${encodeURIComponent(division)}&checklistId=${checklistId || ""}`)
                .then((res) => res.json())
                .then((data) => {
                    if (data.length > 0) {
                        toggleButtons(Boolean(checklistId));

                        data.forEach((milestone) => {
                            const div = document.createElement("div");
                            div.className = "form-check";
                            div.innerHTML = `
                                <input class="form-check-input milestone-checkbox"
                                       type="checkbox"
                                       id="milestone_${milestone.MilestoneId}"
                                       value="${milestone.MilestoneId}"
                                       ${milestone.IsSelected ? "checked" : ""}>
                                <label class="form-check-label" for="milestone_${milestone.MilestoneId}">${milestone.MilestoneName}</label>
                            `;
                            milestoneChecklist.appendChild(div);
                        });
                    } else {
                        noMilestonesMessage.style.display = "block";
                    }
                })
                .catch((error) => {
                    console.error("Error fetching milestones:", error);
                    Swal.fire("Error", "Failed to load milestones. Please try again.", "error");
                });
        };

        divisionDropdown.addEventListener("change", () => {
            fetchMilestones(divisionDropdown.value.trim());
        });

        clearSelection.addEventListener("click", () => {
            divisionDropdown.value = "";
            milestoneChecklist.innerHTML = "";
            toggleButtons(false);
        });

        saveButton.addEventListener("click", function () {
            const division = divisionDropdown.value.trim();
            const selectedMilestones = Array.from(document.querySelectorAll(".milestone-checkbox:checked"))
                .map(chk => parseInt(chk.value));

            if (!division || selectedMilestones.length === 0) {
                Swal.fire("Warning", "Please select a division and at least one milestone.", "warning");
                return;
            }

            const body = {
                division,
                milestoneIds: selectedMilestones,
                checklistName: `${division} Checklist`
            };

            handleChecklistSave("/Admin/SaveChecklist", "POST", body, "Checklist saved successfully.");
        });

        document.body.addEventListener("click", function (event) {
            if (event.target.classList.contains("edit-checklist-btn")) {
                editingChecklistId = event.target.dataset.id;
                const division = event.target.dataset.division;

                divisionDropdown.value = division;
                fetchMilestones(division, editingChecklistId);
            }

            if (event.target.classList.contains("delete-checklist-btn")) {
                const checklistId = event.target.dataset.id;

                Swal.fire({
                    icon: "warning",
                    title: "Are you sure?",
                    text: "This will permanently delete the checklist.",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel"
                }).then(result => {
                    if (result.isConfirmed) {
                        handleChecklistSave(`/Admin/DeleteChecklist`, "POST", { checklistId }, "Checklist deleted successfully.");
                    }
                });
            }
        });

        updateButton.addEventListener("click", function () {
            const division = divisionDropdown.value.trim();
            const selectedMilestones = Array.from(document.querySelectorAll(".milestone-checkbox:checked"))
                .map(chk => parseInt(chk.value));

            if (!division || selectedMilestones.length === 0) {
                Swal.fire("Warning", "Please select a division and at least one milestone.", "warning");
                return;
            }

            const body = {
                checklistId: editingChecklistId,
                division,
                milestoneIds: selectedMilestones
            };

            handleChecklistSave("/Admin/UpdateChecklist", "POST", body, "Checklist updated successfully.");
        });
    });

    function handleChecklistSave(url, method, body, successMessage) {
        fetch(url, {
            method: method,
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    Swal.fire("Success", successMessage, "success").then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire("Error", data.message || "An unexpected error occurred.", "error");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire("Error", "Failed to complete the request. Please try again.", "error");
            });
    }
</script>



