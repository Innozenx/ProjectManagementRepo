@model IEnumerable<ProjectManagementSystem.Models.ChecklistSettingsViewModel>

@{
    ViewBag.Title = "Checklist Setup";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-5">
    <div class="card shadow-sm p-4 rounded-lg text-center">
        <h2 class="fw-bold text-primary">Checklist Setup</h2>
        <p class="text-muted">Track and manage checklist items, project milestones, and approvals efficiently.</p>
    </div>

    <div class="container mt-4">
        <div class="row justify-content-center text-center">
            <div class="col-md-6 mb-3">
                <label class="form-label fw-bold text-secondary">Select a Checklist</label>
                <select id="checklistDropdown" class="form-select shadow-sm wider-dropdown" onchange="loadProjects(this.value)">
                    <option value="">Division's Checklist</option>
                    @foreach (var checklist in ViewBag.Checklists as List<ProjectManagementSystem.Models.ChecklistSettingsViewModel>)
                    {
                        <option value="@checklist.ChecklistId">@checklist.ChecklistName (@checklist.Division)</option>
                    }
                </select>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold text-secondary">Select a Project</label>
                <select id="projectDropdown" class="form-select shadow-sm wider-dropdown" disabled onchange="loadProjectDetails(this.value)">
                    <option value="">Project Name</option>
                </select>
            </div>
        </div>

        <div id="projectContent" class="mt-4 d-none">
            <div class="card shadow-sm rounded-lg">
                <div class="card-body">
                    <h5 class="card-title fw-bold text-primary" id="selectedProjectTitle"></h5>

                    <br />
                    <div class="list-group" id="checklistContainer"></div>
                </div>
            </div>
        </div>

    </div>

</div>

<script>
    function loadProjects(checklistId) {
        if (!checklistId) {
            $("#projectDropdown").prop("disabled", true);
            $("#projectContent").addClass("d-none");
            return;
        }

        $.get(`/Admin/GetProjectsByChecklist?checklistId=${checklistId}`, function (data) {
            if (data.length > 0) {
                $("#projectDropdown").prop("disabled", false);
                const projectDropdown = $("#projectDropdown");
                projectDropdown.empty().append('<option value="">Project Name</option>');
                data.forEach(project => {
                    projectDropdown.append(`<option value="${project.MainId}">${project.ProjectTitle}</option>`);
                });
            } else {
                $("#projectDropdown").prop("disabled", true);
                alert("No projects found for the selected checklist.");
            }
        }).fail(() => {
            alert("Error loading projects.");
        });
    }

    function loadProjectDetails(projectId) {
        if (!projectId) {
            $("#projectContent").addClass("d-none");
            return;
        }
        let selectedProjectName = $("#projectDropdown option:selected").text();
        $("#selectedProjectTitle").text(selectedProjectName);

        $.get(`/Admin/GetProjectDetails?projectId=${projectId}`, function (data) {
            if (data.Milestones.length > 0) {
                $("#projectContent").removeClass("d-none");
                const checklistContainer = $("#checklistContainer");
                checklistContainer.empty();

                data.Milestones.forEach(milestone => {
                    checklistContainer.append(`
                    <div class="milestone-header">${milestone.MilestoneName}</div>
                    <hr class="purple-hr">
                `);

                    milestone.Tasks.forEach(task => {
                        const row = `
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="task-container">
                                <input type="checkbox" class="task-checkbox" data-task-id="${task.Id}" ${task.RequiresApproval ? "checked" : ""}>
                                <span>${task.TaskName}</span>
                            </div>
                            <button class="btn btn-outline-primary btn-sm assign-approver" data-task-id="${task.Id}">Set Approvers</button>
                        </div>
                    `;
                        checklistContainer.append(row);
                    });
                });
            } else {
                $("#projectContent").addClass("d-none");
                Swal.fire("No tasks found", "This project has no milestones or tasks.", "warning");
            }
        }).fail(() => {
            Swal.fire("Error", "Failed to load project details. Please try again.", "error");
        });
    }

</script>
<style>
    .container {
        max-width: 900px;
    }

    .form-select {
        border-radius: 8px;
        padding: 12px;
        font-size: 16px;
        border: 1px solid #6f42c1;
        width: 100%;
        text-align: center;
    }

    .wider-dropdown {
        width: 100%;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .text-center {
        text-align: center !important;
    }

    #projectDropdown:disabled {
        background-color: #f5f5f5;
        color: #999;
        border: 1px solid #ddd;
    }

    .milestone-header {
        font-size: 18px;
        margin-bottom: 5px;
        border-bottom: 2px solid #6f42c1;
        padding-bottom: 5px;
        color: #6f42c1;
        font-weight: bold;
    }

    .milestone-box {
        background: #f9f9f9;
        /*border: 1px solid #6f42c1;*/
        border-radius: 8px;
        padding: 10px;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

        .task-item:last-child {
            border-bottom: none;
        }

    .task-name {
        flex-grow: 1;
    }

    .btn-outline-primary {
        font-size: 14px;
        padding: 5px 10px;
        border-color: #6f42c1;
        color: #6f42c1;
        transition: all 0.3s ease-in-out;
    }

        .btn-outline-primary:hover {
            background-color: #6f42c1;
            color: white;
        } 

    .text-primary {
        color: #6f42c1 !important;
    }

    input[type="checkbox"] {
        accent-color: #6f42c1;
    }
</style>


