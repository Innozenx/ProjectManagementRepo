@model ProjectManagementSystem.Models.ProjectMilestoneViewModel
@{
    ViewBag.Title = "Milestone • Project Management System";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.dhtmlx.com/windows/edge/dhtmlxwindows.css">

</head>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f4f6f9;
        margin: 0;
        padding: 0;
    }

    .card-container {
        display: flex;
        justify-content: center;
        padding: 10px;
        margin: 0;
    }

    .table-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        margin-top: 20px;
    }

    .action-tiles-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin: 10px 30px 0 0;
    }

    .action-tile {
        background-color: #66399A;
        color: white;
        border-radius: 8px;
        padding: 10px 15px;
        min-width: 100px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .action-tile:hover {
            background-color: #552788;
            transform: translateY(-3px);
        }

        .action-tile i {
            font-size: 18px;
            margin-right: 5px;
        }

    .action-tile-title {
        font-size: 0.85rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .action-tile button {
        background-color: transparent;
        border: none;
        color: inherit;
        cursor: pointer;
        font: inherit;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    h3 {
        font-weight: bold;
        color: #66399A;
        text-align: left;
        font-size: 24px;
        margin: 5px 15px 10px 15px;
    }

    #projectDetails {
        width: 100%;
        font-size: 14px;
        border-collapse: collapse;
    }

        #projectDetails th,
        #projectDetails td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        #projectDetails th {
            font-weight: bold;
            color: #555;
        }

        #projectDetails td a {
            color: #66339A;
            text-decoration: none;
        }

            #projectDetails td a:hover {
                text-decoration: underline;
            }

        #projectDetails td {
            color: #333;
        }

    .gantt-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .gantt-view-btn,
    .gantt-nav-btn,
    .gantt-today-btn {
        border: none;
        border-radius: 5px;
        cursor: pointer;
        padding: 8px 15px;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }

    .gantt-view-btn {
        background-color: #66399A;
        color: white;
    }

        .gantt-view-btn:hover,
        .gantt-view-btn.active {
            background-color: #552788;
        }

    .gantt-nav-btn,
    .gantt-today-btn {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        color: #333;
        margin-right: 5px;
    }

        .gantt-nav-btn:hover,
        .gantt-today-btn:hover {
            background-color: #eaeaea;
        }

    .btn-primary {
        background-color: #470A67;
        border: none;
        padding: 10px 20px;
        color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        width: 100%;
        margin-top: 15px;
    }

    #gantt_here {
        width: 100%;
        height: calc(100vh - 200px);
    }

    .activity-log-container {
        padding: 10px;
    }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        border-bottom: 1px solid #eaeaea;
        padding-bottom: 10px;
    }

    .modal-title {
        color: #66399A;
        font-weight: bold;
        font-size: 20px;
    }

    .close {
        color: #333;
        opacity: 1;
        font-size: 20px;
    }

        .close:hover {
            color: #555;
        }

    .maximized {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 1000;
        background-color: white;
        padding: 0;
    }

        .maximized #gantt_here {
            height: calc(100vh - 50px);
        }

    .fa-maximize {
        color: #66399A;
    }

    .nav-tabs {
        padding: 15px 20px;
        font-size: 14px;
    }

        .nav-tabs .nav-link {
            padding: 5px 10px;
            font-size: 14px;
            color: #66399A;
            background-color: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            transition: color 0.3s ease, border-bottom-color 0.3s ease;
        }

            .nav-tabs .nav-link:hover {
                color: #552788;
            }

            .nav-tabs .nav-link.active {
                color: #66399A;
                border-bottom-color: #66399A;
                /*font-weight: bold;*/
            }

        .nav-tabs .nav-item {
            margin-right: 3px;
        }

    .project-header {
        display: flex;
        align-items: center;
        padding: 15px 20px;
    }

    .project-info {
        display: flex;
        align-items: center;
    }

    .project-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #66399A;
        color: #fff;
        border-radius: 8px;
        font-size: 18px;
        height: 40px;
        width: 40px;
        margin-right: 10px;
    }

    .project-name {
        font-size: 20px;
        font-weight: bold;
        color: #66399A;
    }

    .project-actions {
        margin-left: auto;
        display: flex;
        align-items: center;
    }

        .project-actions i {
            color: #66399A;
            font-size: 18px;
            margin-left: 10px;
            cursor: pointer;
            transition: color 0.3s;
        }

            .project-actions i:hover {
                color: #552788;
            }

    .log-entry {
        margin-top: 5%;
    }
</style>

<div class="project-header">
    <div class="project-info">
        <span class="project-icon">
            <i class="fas fa-tasks"></i>
        </span>
        <span class="project-name">@Model.ProjectTitle</span>
    </div>
</div>

<!-- Navigation Tabs -->
<ul class="nav nav-tabs" id="weeklyMilestoneTabs" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="overview-tab" data-toggle="tab" href="#overview" role="tab" aria-controls="overview" aria-selected="true">
            <i class="fas fa-info-circle"></i> Overview
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="timeline-tab" data-toggle="tab" href="#timeline" role="tab" aria-controls="timeline" aria-selected="false">
            <i class="fas fa-project-diagram"></i> Timeline
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="checklist-tab" data-toggle="tab" href="#checklist" role="tab" aria-controls="checkist" aria-selected="false">
            <i class="fa-solid fa-list-check"></i> Checklist
        </a>
    </li>
</ul>

<div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">
    <div class="pop-container">
        <div class="table-container">
            <h3>Project Details</h3>
            @if (Model.ProjectDetails.Any())
            {
                var data = Model.ProjectDetails.FirstOrDefault();

                <table id="projectDetails">
                    <tr>
                        <td style="vertical-align: top; width: 50%;">
                            <table style="width: 100%;">
                                <tr>
                                    <th>Title:</th>
                                    <td>
                                        <a href="@Url.Action("weeklyMilestone", "Checklist", new { id = data.Id, title = data.ProjectTitle, projectId = data.DetailsID })">
                                            @data.ProjectTitle
                                        </a>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Start Date:</th>
                                    <td>@DateTime.Parse(data.ProjectStart).ToString("MMMM dd, yyyy")</td>
                                </tr>
                                <tr>
                                    <th>End Date:</th>
                                    <td>@DateTime.Parse(data.ProjectEnd).ToString("MMMM dd, yyyy")</td>
                                </tr>
                                <tr>
                                    <th>Duration:</th>
                                    <td>
                                        @data.ProjectDuration
                                        @if (data.ProjectDuration == 1)
                                        {
                                            @:day
                                        }
                                        else
                                        {
                                            @:days
                                        }
                                    </td>
                                </tr>

                            </table>
                        </td>
                        <td style="vertical-align: top; width: 50%;">
                            <table style="width: 100%;">
                                <tr>
                                    <th>Year:</th>
                                    <td>@data.ProjectYear</td>
                                </tr>
                                <tr>
                                    <th>Business Unit:</th>
                                    <td>@data.Division</td>
                                </tr>
                                <tr>
                                    <th>Category:</th>
                                    <td>@data.Category</td>
                                </tr>
                                <tr>
                                    <th>Project Owner:</th>
                                    <td>@data.ProjectOwner</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            }
        </div>
    </div>

    <!-- Update Status and Activity Log Tiles -->
    <div class="action-tiles-container">
        <div class="action-tile">
            <button type="button" data-toggle="modal" data-target="#updateMilestoneModal" class="action-tile-title">
                <i class="fas fa-edit"></i> Status
            </button>
        </div>
        <div class="action-tile">
            <button type="button" data-toggle="modal" data-target="#activityLogModal" onclick="loadActivityLogs()" class="action-tile-title">
                <i class="fas fa-history"></i> Activity
            </button>
        </div>
    </div>


    <!-- Update Status Modal -->
    <div class="modal fade" id="updateMilestoneModal" tabindex="-1" role="dialog" aria-labelledby="updateMilestoneLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content shadow-lg rounded">
                <div class="modal-header bg-white">
                    <h5 class="modal-title" id="updateMilestoneLabel">
                        Status Update
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-white p-4">
                    <form id="updateStatusForm" action="@Url.Action("UpdateStatus", "Checklist")" method="post" enctype="multipart/form-data">

                        <div class="form-group mb-4">
                            <label for="milestone" class="milestone-text">
                                Select Task <span class="text-danger">*</span>
                            </label>
                            @Html.DropDownListFor(m => m.SelectedMilestone, Model.TaskTitle, "Choose a Task", new { @class = "form-control rounded border-light", id = "selectedMilestone" })
                        </div>

                        <div class="form-group mb-4 d-none" id="delay_div">
                            <div class="form-group mb-4">
                                <label for="isDelayed" class="status-update d-block mb-2">
                                    Is your task delayed? <span class="text-danger">*</span>
                                </label>
                                <div class="form-check form-check-inline">
                                    @Html.RadioButtonFor(x => x.isDelayed, false, new { id = "delayed_no", @class = "form-check-input" })
                                    <label for="delayed_no" class="form-check-label">No</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @Html.RadioButtonFor(x => x.isDelayed, true, new { id = "delayed_yes", @class = "form-check-input" })
                                    <label for="delayed_yes" class="form-check-label">Yes</label>
                                </div>
                            </div>

                            <div class="input-group d-none" id="delay_input_group">
                                <label for="weeks_delayed" class="status-update d-block mb-2" id="delay_label">
                                    If delayed, by how many weeks? <span class="text-danger">*</span>
                                </label>
                                @Html.EditorFor(x => x.delay, new { htmlAttributes = new { @class = "form-control", @min = "1", @id = "weeks_delayed", @placeholder = "Enter number of weeks" } })
                                <div class="input-group-append">
                                    <span class="input-group-text">Week/s</span>
                                </div>
                                <div id="delay_note_div" style="width: 100%">
                                    <p style="color: red; font-style: italic"><small id="delay_note"></small></p>
                                </div>
                            </div>

                            <div class="form-group mb-4">
                                <label for="statusUpdate" class="status-update">
                                    Description <span class="text-danger">*</span>
                                </label>
                                @Html.TextAreaFor(m => m.StatusUpdate, new { @class = "form-control rounded border-light", placeholder = "Add more detailed description...", rows = 3, id = "statusUpdate" })
                            </div>

                            <div class="form-group mb-4">
                                <label for="fileUpload" class="select-attach">
                                    Attachment <span class="text-danger">*</span>
                                </label>
                                <input type="file" name="fileUpload" id="fileUpload" class="form-control-file" />
                            </div>

                        </div>

                        <div id="validationMessage" class="text-danger" style="display:none; margin-bottom:10px;">
                            Please fill out all required fields.
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-primary" onclick="validateAndSubmit()">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Project Members Section -->
    <div class="table-container" id="detailsContainer">
        <h3>Project Members</h3>
        @if (Model.ProjectMembers.Any())
        {
            <div class="members-grid">
                @foreach (var member in Model.ProjectMembers)
                {
                    <div class="member-card shadow-sm p-3 mb-4 bg-white rounded">
                        <div class="d-flex align-items-center">
                            <div class="avatar-circle d-flex justify-content-center align-items-center">
                                <span class="avatar-initials">@member.Initials</span>
                            </div>
                            <div class="ml-3 member-details">
                                <p class="member-name font-weight-bold mb-1">@member.Name</p>
                                <p class="member-role text-muted mb-1">
                                    @switch (member.Role.ToString().ToLowerInvariant())
                                    {
                                        case "1":
                                            <span>Tester</span>
                                            break;
                                        case "2":
                                            <span>Editor</span>
                                            break;
                                        case "1004":
                                            <span>Project Manager</span>
                                            break;
                                        case "1005":
                                            <span>Viewer</span>
                                            break;
                                        default:
                                            <span>Unknown Role</span>
                                            break;
                                    }

                                </p>
                                <p class="member-email text-muted small">@member.Email</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="no-members-text text-center text-muted">No members are assigned to this project yet.</p>
        }
    </div>


    <!-- Status Successfully Updated Modal -->
    <div class="modal fade" id="statusUpdatedModal" tabindex="-1" role="dialog" aria-labelledby="statusUpdatedLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="statusUpdatedLabel">Success!</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Status Updated!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Logs Modal -->
    <div class="modal fade" id="activityLogModal" tabindex="-1" role="dialog" aria-labelledby="activityLogLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content shadow-lg rounded">
                <div class="modal-header bg-white">
                    <h5 class="modal-title" id="activityLogLabel">Activity Log</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="false">&times;</span>
                    </button>
                </div>
                <div id="activity-log-container" class="activity-log-container"></div>
                <div class="modal-body bg-white p-4">

                    @if (Model.StatusLogs != null && Model.StatusLogs.Any())
                    {
                        foreach (var log in Model.StatusLogs)
                        {
                            <div class="log-entry">
                                <div class="d-flex align-items-center justify-content-between mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle">
                                            @log.Username[0]
                                        </div>
                                        <p class="mb-0 ml-2"><strong>@log.Username</strong></p>
                                    </div>
                                    @if (DateTime.TryParse(log.DateUpdated, out var parsedDate))
                                    {
                                        <p class="text-muted mb-0" style="font-size: 0.9em;">
                                            Updated on @parsedDate.ToString("MMMM dd, yyyy - hh:mm tt")
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-0" style="font-size: 0.9em;">No Date</p>
                                    }
                                </div>
                                <!-- Milestone, Description, and Attachment Link -->
                                <div class="log-details ml-5">
                                    <p class="mb-1 ml-2"><strong>Milestone:</strong> @log.MilestoneName</p>
                                    <p class="mb-1 ml-2"><strong>Description:</strong> @log.Description</p>
                                    @if (!string.IsNullOrEmpty(log.Attachment))
                                    {
                                        <p class="mb-0">
                                            <a href="javascript:void(0);" onclick="@Url.Content(log.Attachment)" class="attachment-link">
                                                <i class="fas fa-paperclip"></i> View Attachment
                                            </a>
                                            <img runat="server" src="@log.Attachment" width="150px" height="150px" />
                                        </p>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="icon">
                            <img src="~/AdminLTE-3.2.0/dist/img/ek.png" alt="No Logs">
                        </div>
                        <p>There aren't any status updates in this project yet.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Attachment Viewing Modal -->
    <div class="modal fade" id="attachmentModal" tabindex="-1" role="dialog" aria-labelledby="attachmentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="attachmentModalLabel">Attachment Preview</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <iframe id="attachmentFrame" src="" style="width:100%; height:500px;" frameborder="0"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Timeline Tab -->
<div class="tab-pane fade" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">
    <!-- Gantt Chart Section -->
    <div class="card-container" id="gantt_container">
        <div class="table-container">
            <div class="gantt-header">
                <div class="gantt-view-controls">
                    <button id="day-view" class="gantt-view-btn active">Day</button>
                    <button id="week-view" class="gantt-view-btn">Week</button>
                    <button id="month-view" class="gantt-view-btn">Month</button>
                </div>
                @*<div class="gantt-date-controls">
                        <button id="prev-date" class="gantt-nav-btn">«</button>
                        <span id="date-range"></span>
                        <button id="today-btn" class="gantt-today-btn">Today</button>
                        <button id="next-date" class="gantt-nav-btn">»</button>
                    </div>*@

                <div>
                    <button id="maximize-btn" class="gantt-nav-btn"><i class="fa-solid fa-maximize"></i></button>
                    <button id="minimize-btn" class="gantt-nav-btn" style="display: none;">Minimize</button>
                </div>
            </div>
            <div id="gantt_here" style="width:100%; height:60vh;"></div>
        </div>
    </div>
</div>

<!--Checklist Tab-->
<!--ON GOING CHECKLIST TAB-->
<div class="tab-pane fade" id="checklist" role="tabpanel" aria-labelledby="checklist-tab">
    <div class="card shadow-sm p-4">
        <h3 class="text-center text-purple">Checklist</h3>
        <p class="text-center text-muted">Manage checklist for each milestone.</p>
        <!-- Milestone Dropdown -->
        <div class="row mt-4 justify-content-center align-items-center">
            <div class="col-md-6">
                <div class="input-group">
                    <label class="input-group-text bg-purple text-white" for="milestoneDropdown">
                        <i class="fas fa-tasks"></i>
                    </label>
                    <select id="milestoneDropdown" class="form-select shadow-sm" onchange="loadChecklist(this.value)">
                        <option value="">Select a Milestone</option>
                    </select>
                </div>
            </div>
        </div>
        <!-- Checklist -->
        <div id="checklistContainer" class="mt-4">
            <div class="text-center text-muted">Select a milestone to view tasks.</div>
        </div>
    </div>
</div>


@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>

    <script>
        //function loadActivityLogs() {
        //    const activityLogContainer = $('#activity-log-container');
        //    activityLogContainer.html('<p>Loading activity logs...</p>');

        //    $.ajax({
        //        url: '/Checklist/GetActivityLogs',
        //        type: 'GET',
        //        success: function (response) {
        //            activityLogContainer.html(response.data);
        //        },
        //        error: function () {
        //            activityLogContainer.html('<p>Failed to load activity logs. Please try again later.</p>');
        //        }
        //    });
        //}

        function validateAndSubmit() {
            const milestone = $('#selectedMilestone').val();
            const statusUpdate = $('#statusUpdate').val();
            const validationMessage = $('#validationMessage');

            validationMessage.hide();

            if (!milestone || !statusUpdate.trim()) {
                validationMessage.text('Please fill out all required fields.').show();
                return;
            }

            const formData = new FormData($('#updateStatusForm')[0]);

            $.ajax({

                url: "@Url.Action("UploadFile", "FileUpload")",


                url: "@Url.Action("UpdateStatus", "Checklist")",

                type: 'POST',
                processData: false,
                contentType: false,
                cache: false,
                data: formData,
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Status Updated!',
                        text: 'Milestone status has been successfully updated.',
                    }).then(function(){
                        location.reload();
                    });

                    loadActivityLogs();
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: 'An error occurred while updating the milestone status.',
                    });
                }
            });
        }


    </script>

    <script>

        document.addEventListener("DOMContentLoaded", function () {
            gantt.config.xml_date = "%Y-%m-%d %H:%i";
            gantt.config.readonly = true;
            gantt.config.columns = [
                { name: "key_person", label: "Key Person", align: "center", width: 90 },
                { name: "text", label: "Milestone", tree: true, width: 200 },
                { name: "duration", label: "Duration", align: "center", width: 70 },
                { name: "start_date", label: "Start", align: "center", width: 90 },
                { name: "end_date", label: "Finish", align: "center", width: 90 }
            ];
            gantt.config.scales = [
                { unit: "week", date: "Week %W" }
            ];

            gantt.templates.task_text = function () {
                return "";
            };

             gantt.init("gantt_here");
            gantt.load(`/Checklist/getGanttData?id=@TempData["entry"]`, "json");




        const setDayView = () => {
            gantt.config.scales = [
                    { unit: "day", step: 1, date: "%d" },
                    { unit: "week", date: "Week %W" }
                ];
            gantt.render();
        };


        const setWeekView = () => {
            gantt.config.scales = [
                    { unit: "week", step: 1, date: "WW %W" },
                    { unit: "month", step: 1, date: "%F %Y" }
                ];
            gantt.render();
        };

        const setMonthView = () => {
            gantt.config.scales = [
                    { unit: "month", step: 1, date: "%F %Y" },
                    { unit: "year", step: 1, date: "%Y" }
                ];
            gantt.render();
        };

        document.querySelector("#day-view").addEventListener("click", () => {
            setDayView();
            activateButton("day-view");
        });

        document.querySelector("#week-view").addEventListener("click", () => {
            setWeekView();
            activateButton("week-view");
        });

        document.querySelector("#month-view").addEventListener("click", () => {
            setMonthView();
            activateButton("month-view");
        });

        const activateButton = (buttonId) => {
            document.querySelectorAll(".gantt-view-btn").forEach((btn) => {
                btn.classList.remove("active");
            });
            document.getElementById(buttonId).classList.add("active");
        };

            $("#timeline-tab").on("click", function () {
                $("#detailsContainer").css("display", "none");
                $("#overview").css("display", "none");
                $("#checklist").css("display", "none");
                $("#timeline").css("display", "block");
            });

            $("#overview-tab").on("click", function () {
                $("#detailsContainer").css("display", "block");
                $("#overview").css("display", "block");
                $("#checklist").css("display", "none");
                $("#timeline").css("display", "none");
            });

            $("#checklist-tab").on("click", function () {
                $("#detailsContainer").css("display", "none");
                $("#overview").css("display", "none");
                $("#checklist").css("display", "block");
                $("#timeline").css("display", "none");

            });

            setWeekView();
            activateButton("week-view");

            //loadActivityLogs();
        });

    </script>

    <script>

        $(document).ready(function () {
        const mainId = '@(TempData["entry"] ?? "null")';

        if (mainId === "null") {
            console.error("mainId is not set. Please check your TempData.");
            return;
            }
        });

        $("#milestoneDropdown").on("change", function () {
            const milestoneId = $(this).val();
            loadTasksForMilestone(milestoneId, @(TempData["entry"]));
        });

        $("#delayed_yes").on("click", function () {
            $("#delay_div").removeClass("d-none");
            $("#delay_div").prop("class", "form-group mb-4");
        });

        $("#delayed_no").on("click", function () {
            $("#delay_div").classList.add("d-none");
        });

        $("#selectedMilestone").on("change", function () {
            let selection = $("#selectedMilestone").val();
            if (selection != "") {
                $("#status_input_group").removeClass("d-none");

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetTaskUpdate", "Checklist")",
                    data: { selection },
                    success: function (res) {
                        if (res.success == true) {
                            if (res.data != 0) {
                                var note = document.getElementById("delay_note");
                                var inputGrp = document.getElementById("delay_input_group");

                                $("#delayed_yes").prop("checked", true);
                                $("#weeks_delayed").prop("value", res.data);
                                $("#delay_div").removeClass("d-none");
                                inputGrp.classList.remove("d-none");

                                note.textContent = "Previously Delayed by: " + res.data + " week/s";
                            }

                            else {
                                var note = document.getElementById("delay_note");
                                var inputGrp = document.getElementById("delay_input_group");

                                $("#delayed_no").prop("checked", true);
                                $("#weeks_delayed").prop("value", res.data);
                                $("#delay_div").removeClass("d-none");
                                inputGrp.classList.add("d-none");

                                //note.textContent = "";
                            }
                        }

                        else {
                            alert(res.message);
                        }
                    }
                });
            }

            else {
                $("#status_input_group").prop("class", "d-none");
            }
        });
        
    </script>

    <script>
        loadMilestones(@TempData["entry"]);

        function loadMilestones(mainId) {
            $.ajax({
                url: "/Checklist/GetMilestonesWithApprovalTasks",
                type: "GET",
                data: { mainId },
                datatype: "json",
                success: function (response) {
                    if (response.success) {
                        //milestoneDropdown.empty().append('<option value="">Select a Milestone</option>');
                        response.data.forEach(milestone => {
                            //milestoneDropdown.append(`<option value="${}">${response.data.milestone}</option>`);
                            $("#milestoneDropdown").append('<option value="'+ milestone.MilestoneId +'">' + milestone.MilestoneName + '</option>');
                        });
                        //$("#milestoneDropdown").append('<option>' + response.data[0].MilestoneName + '</option>');
                    } else {
                        Swal.fire("Error", "Failed to load milestones.", "error");
                    }
                },
                error: function (xhr) {
                    console.error("Error fetching milestones:", xhr.responseText);
                }
            });
        }

        function loadTasksForMilestone(milestoneId, mainId) {
            const checklistTableBody = $("#checklistTableBody");

            if (!milestoneId) {
                checklistTableBody.html('<tr><td colspan="5" class="text-center">Select a milestone to view tasks.</td></tr>');
                return;
            }

            $.ajax({
                url: "/Checklist/GetTasksForMilestone",
                type: "GET",
                data: { milestoneId, mainId },
                success: function (response) {
                    checklistTableBody.empty();
                    if (response.success && response.data.length > 0) {
                        response.data.forEach(task => {
                            checklistTableBody.append(`
                                        <tr>
                                            <td id="${task.task_id}name">${task.taskname}</td>
                                            <td>${task.approved ? "Approved" : task.reason != null ? "Disapproved" : "Pending"}</td>
                                            <td>${task.attachment != null
                                                ? `<a href="${task.attachment}">View Attachment</a>` 
                                                : `<input type="file" class="form-control-file" id="${task.task_id}file">`}
                                            </td>
                                            <td>${task.approvers.join(", ") || "N/A"}</td>
                                            <td>
                                                ${task.attachment != null
                                                ? task.approved == true
                                                    ? `<button class="btn btn-sm btn-success" disabled>Approved</button>`
                                                    : task.reason != null
                                                        ? `<button class="btn btn-sm btn-danger" disabled>Disapproved</button>`
                                                        : `<button class="btn btn-sm btn-warning" disabled>Pending Approval</button>`
                                                    : `<button class="btn btn-sm btn-success" onclick="submitApproval(${task.task_id})">Submit</button>`}         
                                            </td>
                                            <td class="d-none" id="${task.task_id}milestone">${task.milestone_id}</td>
                                            <td class="d-none" id="${task.task_id}project">${task.project_id}</td>
                                        </tr>
                                    `);
                        });
                    } else {
                        checklistTableBody.html('<tr><td colspan="5" class="text-center">No tasks found for this milestone.</td></tr>');
                    }
                },
                error: function (xhr) {
                    console.error("Error fetching tasks:", xhr.responseText);
                }
            });
        }

        function submitApproval(task_id) {
            var inputFile = $("#" + task_id + "file");
            var inputName = $("#" + task_id + "name");
            var inputMilestone = $("#" + task_id + "milestone");
            var inputProject = $("#" + task_id + "project");

            var fileupload = inputFile.get(0);
            var taskname = inputName.text();
            var taskmilestone = inputMilestone.text();
            var taskproject = inputProject.text();

            var files = fileupload.files;

            var fileData = new FormData();

            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            fileData.append("name", taskname);
            fileData.append("id", task_id);
            fileData.append("milestone_id", taskmilestone);
            fileData.append("project_id", taskproject);

            $.ajax({
                type: "POST",
                url: "@Url.Action("UploadFile", "FileUpload")",
                contentType: false,
                processData: false,
                data: fileData,
                success: function (res) {
                    if (res.message == "success") {
                        Swal.fire({
                            icon: 'success',
                            title: 'File Upload Successful!',
                            text: 'File successfully submitted to the server!',
                        }).then(function () {
                            location.reload();
                        });
                    }

                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Upload Failed',
                            text: 'An error occurred while uploading.',
                        });
                    }
                }
            });
        }

    </script>
}
