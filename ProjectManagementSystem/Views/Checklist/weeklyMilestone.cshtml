@model ProjectManagementSystem.Models.ProjectMilestoneViewModel
@{
    ViewBag.Title = "Milestone • Project Management System";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var selectedTab = Request.QueryString["tab"] ?? "overview";


}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.dhtmlx.com/windows/edge/dhtmlxwindows.css">

</head>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f4f6f9;
        margin: 0;
        padding: 0;
    }

    .card-container {
        display: flex;
        justify-content: center;
        padding: 10px;
        margin: 0;
    }

    .table-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        margin-top: 20px;
    }

    .action-tiles-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin: 10px 30px 0 0;
    }

    .action-tile {
        background-color: #66399A;
        color: white;
        border-radius: 30px; 
        padding: 10px 20px;
        min-width: 100px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 45px;
    }

        .action-tile:hover {
            background-color: #552788;
 
        }

        .action-tile i {
            font-size: 18px;
            margin-right: 5px;
        }

    .action-tile-title {
        font-size: 0.85rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .action-tile button {
        background-color: transparent;
        border: none;
        color: inherit;
        cursor: pointer;
        font: inherit;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    h3 {
        /*font-weight: bold;*/
        color: #66399A;
        text-align: left;
        font-size: 24px;
        margin: 5px 15px 10px 15px;
    }

    #projectDetails {
        width: 100%;
        font-size: 14px;
        border-collapse: collapse;
    }

        #projectDetails th,
        #projectDetails td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        #projectDetails th {
            font-weight: bold;
            color: #555;
        }

        #projectDetails td a {
            color: #66339A;
            text-decoration: none;
        }

            #projectDetails td a:hover {
                text-decoration: underline;
            }

        #projectDetails td {
            color: #333;
        }

    .gantt-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .gantt-view-btn,
    .gantt-nav-btn,
    .gantt-today-btn {
        border: none;
        border-radius: 5px;
        cursor: pointer;
        padding: 8px 15px;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }

    .gantt-view-btn {
        background-color: #66399A;
        color: white;
    }

        .gantt-view-btn:hover,
        .gantt-view-btn.active {
            background-color: #552788;
        }

    .gantt-nav-btn,
    .gantt-today-btn {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        color: #333;
        margin-right: 5px;
    }

        .gantt-nav-btn:hover,
        .gantt-today-btn:hover {
            background-color: #eaeaea;
        }

    .btn-primary {
        background-color: #470A67;
        border: none;
        padding: 10px 20px;
        color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        width: 100%;
        margin-top: 15px;
    }

    .btn-danger {
        border: none;
        padding: 10px 20px;
        color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        width: 100%;
        margin-top: 15px;
    }

    #gantt_here {
        width: 100%;
        height: calc(100vh - 200px);
    }

    .activity-log-container {
        padding: 10px;
    }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        border-bottom: 1px solid #eaeaea;
        padding-bottom: 10px;
    }

    .modal-title {
        color: white;
        font-size: 20px;
    }

    .close {
        color: #333;
        opacity: 1;
        font-size: 20px;
    }

        .close:hover {
            color: #555;
        }

    .maximized {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 1000;
        background-color: white;
        padding: 0;
    }

        .maximized #gantt_here {
            height: calc(100vh - 50px);
        }

    .fa-maximize {
        color: #66399A;
    }

    .nav-tabs {
        padding: 15px 20px;
        font-size: 14px;
    }

        .nav-tabs .nav-link {
            padding: 5px 10px;
            font-size: 14px;
            color: #66399A;
            background-color: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            transition: color 0.3s ease, border-bottom-color 0.3s ease;
        }

            .nav-tabs .nav-link:hover {
                color: #552788;
            }

            .nav-tabs .nav-link.active {
                color: #66399A;
                border-bottom-color: #66399A;
                /*font-weight: bold;*/
            }

        .nav-tabs .nav-item {
            margin-right: 3px;
        }

    .project-header {
        display: flex;
        align-items: center;
        padding: 15px 20px;
    }

    .project-info {
        display: flex;
        align-items: center;
    }

    .project-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #66399A;
        color: #fff;
        border-radius: 8px;
        font-size: 18px;
        height: 40px;
        width: 40px;
        margin-right: 10px;
    }

    .project-name {
        font-size: 20px;
        font-weight: bold;
        color: #66399A;
    }

    .project-actions {
        margin-left: auto;
        display: flex;
        align-items: center;
    }

        .project-actions i {
            color: #66399A;
            font-size: 18px;
            margin-left: 10px;
            cursor: pointer;
            transition: color 0.3s;
        }

            .project-actions i:hover {
                color: #552788;
            }

    .log-entry {
        margin-top: 5%;
    }

    .multi-select-dropdown {
        position: relative;
        background: #fff;
        cursor: pointer;
    }

        .multi-select-dropdown .dropdown-header {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
            font-size: 0.9rem;
            color: #333;
        }

        .multi-select-dropdown .dropdown-options {
            display: none;
            position: absolute;
            z-index: 10;
            width: 100%;
            max-height: 250px;
            overflow-y: auto;
            background: #fff;
            border: 1px solid #ccc;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 0 0 5px 5px;
            margin-top: 5px;
            padding: 10px;
        }

        .multi-select-dropdown.open .dropdown-options {
            display: block;
        }

    .dropdown-item {
        padding: 8px 0;
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 14px;
        color: #333;
        font-weight: normal;
    }

        .dropdown-item input[type="checkbox"] {
            margin-right: 10px;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .dropdown-item label {
            margin: 0;
            line-height: 1.5;
            cursor: pointer;
        }

    .selected-members-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        padding: 10px;
        background: #f4f6f9;
        border: 1px solid #ccc;
        border-radius: 5px;
        min-height: 50px;
        max-height: 150px;
        overflow-y: auto;
    }

        .selected-members-chips .chip {
            background-color: #66339A;
            color: white;
            padding: 6px 10px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .selected-members-chips .chip .remove-chip {
                margin-left: 10px;
                cursor: pointer;
                background: transparent;
                border: none;
                color: white;
            }

    tr, th, td {
        margin: auto;
        text-align: center;
    }

    /*.input-group-text {
        border-radius: 6px 0 0 6px;
        font-size: 16px;
        padding: 8px 12px;
    }*/

    .form-select {
        border-radius: 0 6px 6px 0;
        font-size: 16px;
        padding: 10px;
    }


    .checklist-table {
        border-radius: 8px;
        overflow: hidden;
        background: white;
        width: 100%;
    }

        .checklist-table th {
            background: #66399A;
            color: white;
            padding: 12px;
            font-weight: normal;
        }

        .checklist-table tbody tr {
            transition: all 0.2s ease-in-out;
        }

            .checklist-table tbody tr:hover {
                background: #f5f5f5;
            }


    .btn-purple {
        background-color: #6A0DAD;
        color: white;
        border: none;
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 6px;
        transition: all 0.3s ease-in-out;
        width: 200px;
        display: block;
        margin: auto;
        text-align: center;
        font-weight: normal
    }

        /*.btn-purple:hover {
            background-color: #570D8A;
            color: white;
        }*/


        .btn-purple:hover {
            background-color: #4E0D8D;

        }


    .fa-check {
        color: green;
    }

    .fa-exclamation-circle {
        color: orange;
    }

    .fa-ban {
        color: red;
    }

    .milestone-dropdown-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        margin-top: 10px;
    }

    .input-group {
        display: flex;
        align-items: center;
        width: auto;
    }


    .input-group-text {
        background: #66399A;
        color: white;
        border: none;
        padding: 10px 15px;
        border-top-left-radius: 6px;
        border-bottom-left-radius: 6px;
        height: 45px;
    }


    #milestoneDropdown {
        width: 250px;
        text-align: center;
    }

    .badge {
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 0.7rem;
    }


    .badge-active {
        background-color: #f1c40f;
        color: #66399A;
    }

    .badge-completed {
        background-color: #27ae60;
        color: #fff;
    }

    .badge-delayed {
        background-color: #e74c3c;
        color: #fff;
    }

    .modal-backdrop.show {
        background-color: rgba(0, 0, 0, 2);
        transition: background-color 0.3s ease;
    }

    .modal.fade .modal-dialog {
        transform: scale(0.95);
        transition: transform 0.3s ease-out;
    }

    .modal.show .modal-dialog {
        transform: scale(1);
    }

    select#selectedMilestone {
        appearance: none;
        -webkit-appearance: none;
        background-color: #f4f6ff;
        border: 1px solid #ccc;
        border-radius: 30px;
        padding: 10px 15px;
        font-size: 0.95rem;
        font-family: 'Poppins', sans-serif;
        background-image: url("data:image/svg+xml,%3Csvg width='10' height='7' viewBox='0 0 10 7' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1L5 5L9 1' stroke='%2366399A' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 12px;
        width: 100%;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    input[type="file"] {
        width: 100%;
        padding: 14px 16px;
        border: 1px solid #ccc;
        border-radius: 30px;
        background-color: #f4f6ff;
        font-size: 0.9rem;
        font-family: 'Poppins', sans-serif;
        color: #333;
        cursor: pointer;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        height:50px;
    }

        input[type="file"]::file-selector-button {
            background-color: #66399A;
            color: white;
            border: none;
            padding: 10px 16px; 
            margin-right: 10px;
            border-radius: 20px;
            font-family: 'Poppins', sans-serif;
            font-size: 0.85rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            height: 40px; 
        }

            input[type="file"]::file-selector-button:hover {
                background-color: #552788;
            }

</style>

<div class="project-header">
    <div class="project-info">
        <span class="project-icon">
            <i class="fas fa-tasks"></i>
        </span>
        <span class="project-name">@Model.ProjectTitle</span>
    </div>
</div>

@if (Model.IsArchived)
{
    <div style="background-color: #fff3cd; border-left: 5px solid #ffc107; padding: 15px; margin: 20px auto; text-align: center; font-weight: 600; border-radius: 5px; max-width: 1000px;">
        <i class="fas fa-lock mr-2 text-warning"></i>
        This project is <strong>archived</strong> and is in <span style="color: #d63384;">view-only</span> mode.
    </div>
}

@*<ul class="nav nav-tabs" id="weeklyMilestoneTabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link @(selectedTab == "overview" ? "active" : "")" id="overview-tab"
               data-toggle="tab" href="#overview" role="tab" aria-controls="overview" aria-selected="true">
                <i class="fas fa-info-circle"></i> Overview
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="timeline-tab" data-toggle="tab" href="#timeline" role="tab" aria-controls="timeline" aria-selected="false">
                <i class="fas fa-project-diagram"></i> Timeline
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="checklist-tab" data-toggle="tab" href="#checklist" role="tab" aria-controls="checkist" aria-selected="false">
                <i class="fa-solid fa-list-check"></i> Checklist
            </a>
        </li>
    </ul>*@

<ul class="nav nav-tabs" id="weeklyMilestoneTabs" role="tablist">
    <li class="nav-item">
        <a class="nav-link @(selectedTab == "overview" ? "active" : "")"
           id="overview-tab"
           data-toggle="tab"
           href="#overview"
           role="tab"
           aria-controls="overview"
           aria-selected="@(selectedTab == "overview" ? "true" : "false")">
            <i class="fas fa-info-circle"></i> Overview
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(selectedTab == "timeline" ? "active" : "")"
           id="timeline-tab"
           data-toggle="tab"
           href="#timeline"
           role="tab"
           aria-controls="timeline"
           aria-selected="@(selectedTab == "timeline" ? "true" : "false")">
            <i class="fas fa-project-diagram"></i> Timeline
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(selectedTab == "checklist" ? "active" : "")"
           id="checklist-tab"
           data-toggle="tab"
           href="#checklist"
           role="tab"
           aria-controls="checklist"
           aria-selected="@(selectedTab == "checklist" ? "true" : "false")">
            <i class="fa-solid fa-list-check"></i> Checklist
        </a>
    </li>
</ul>



@*<div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">*@
<div class="tab-pane fade @(selectedTab == "overview" ? "show active" : "")" id="overview" role="tabpanel" aria-labelledby="overview-tab">

    <div class="pop-container">
        <div class="table-container">
            <h3>Project Details</h3>
            @if (Model.ProjectDetails.Any())
            {
                var data = Model.ProjectDetails.FirstOrDefault();

                <table id="projectDetails">
                    <tr>
                        <td style="vertical-align: top; width: 50%;">
                            <table style="width: 100%;">
                                <tr>
                                    <th>Title:</th>
                                    <td>
                                        <a href="@Url.Action("weeklyMilestone", "Checklist", new { id = data.Id, title = data.ProjectTitle, projectId = data.DetailsID })" class="fw-bold text-purple">
                                            @data.ProjectTitle
                                        </a>
                                        <div class="mt-1">
                                            @if (Model.ProjectStatus == "Active")
                                            {
                                                <span class="badge badge-active">Active</span>
                                            }
                                            else if (Model.ProjectStatus == "Completed")
                                            {
                                                <span class="badge badge-completed">Completed</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-delayed">Delayed</span>
                                            }
                                        </div>
                                    </td>
                                </tr>


                                <tr>
                                    <th>Start Date:</th>
                                    <td>@DateTime.Parse(data.ProjectStart).ToString("MMMM dd, yyyy")</td>
                                </tr>
                                <tr>
                                    <th>End Date:</th>
                                    <td>@DateTime.Parse(data.ProjectEnd).ToString("MMMM dd, yyyy")</td>
                                </tr>
                                <tr>
                                    <th>Duration:</th>
                                    @{
                                        var startDate = DateTime.Parse(data.ProjectStart);
                                        var endDate = DateTime.Parse(data.ProjectEnd);
                                        var duration = (endDate - startDate).TotalDays + 1;
                                    }
                                    <td>
                                        @duration @((duration == 1) ? "day" : "days")
                                    </td>
                                </tr>


                            </table>
                        </td>
                        <td style="vertical-align: top; width: 50%;">
                            <table style="width: 100%;">
                                <tr>
                                    <th>Year:</th>
                                    <td>@data.ProjectYear</td>
                                </tr>
                                <tr>
                                    <th>Division:</th>
                                    <td>@data.Division</td>
                                </tr>
                                <tr>
                                    <th>Category:</th>
                                    <td>@data.Category</td>
                                </tr>
                                <tr>
                                    <th>Project Owner:</th>
                                    <td>@data.ProjectOwner</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            }
        </div>
    </div>

    <div class="action-tiles-container">
        @if (!Model.IsArchived && (Model.IsProjectManager && (Model.IsODCPAdmin || !Model.IsODCPAdmin)))
        {
            <div class="action-tile">
                <button type="button" data-toggle="modal" data-target="#updateMilestoneModal" class="action-tile-title">
                    <i class="fas fa-edit"></i> Status
                </button>
            </div>
        }

        <div class="action-tile">
            <button type="button" data-toggle="modal" data-target="#activityLogModal" onclick="loadActivityLogs()" class="action-tile-title">
                <i class="fas fa-history"></i> Status Logs
            </button>
        </div>
    </div>


    <div class="modal fade" id="updateMilestoneModal" tabindex="-1" role="dialog" aria-labelledby="updateMilestoneLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content border-0 shadow-sm rounded-4 overflow-hidden" style="background-color: #fff;">

                <!-- Header -->
                <div class="modal-header bg-white border-bottom-0 px-4 pt-4 pb-2">
                    <h5 class="modal-title fs-6 fw-semibold text-dark" id="updateMilestoneLabel">
                        <i class="bi bi-pencil-square me-2 text-purple"></i>Update Task Status
                    </h5>
                    <button type="button" class="btn fs-4 lh-1 p-0 text-muted" data-bs-dismiss="modal" aria-label="Close"
                            style="background: none; border: none;">
                        &times;
                    </button>
                </div>

                <div class="modal-body px-4 pt-2 pb-4">
                    <form id="updateStatusForm" action="@Url.Action("UpdateStatus", "Checklist")" method="post" enctype="multipart/form-data">

                        <!--task selector-->
                        <div class="mb-3">
                            <label for="selectedMilestone" class="form-label small text-secondary">
                                <i class="bi bi-list-check me-1"></i>Task <span class="text-danger">*</span>
                            </label>
                          @Html.DropDownListFor(m => m.SelectedMilestone, Model.TaskTitle, "Choose a Task",
                        new
                        {
                            @class = "form-select form-select-sm shadow-sm rounded-2 px-3 py-2",
                            @style = "appearance: none; background-color: #fff; border: 1px solid #ccc; font-size: 0.9rem; transition: border-color 0.2s ease-in-out;",
                            id = "selectedMilestone"
                        })

                        </div>

                        <!-- delay -->
                        <div class="mb-3 d-none" id="delay_div">
                            <label class="form-label small text-secondary">
                                <i class="bi bi-clock me-1"></i>Is your task delayed? <span class="text-danger">*</span>
                            </label>
                            <div class="d-flex gap-3">
                                <div class="form-check">
                                    @Html.RadioButtonFor(x => x.isDelayed, false, new { id = "delayed_no", @class = "form-check-input" })
                                    <label class="form-check-label" for="delayed_no">No</label>
                                </div>

                                <div class="form-check">
                                    @Html.RadioButtonFor(x => x.isDelayed, true, new { id = "delayed_yes", @class = "form-check-input" })
                                    <label class="form-check-label" for="delayed_yes">Yes</label>
                                </div>
                            </div>

                            <div class="mt-3 d-none" id="delay_input_group">
                                <label for="weeks_delayed" class="form-label small text-secondary">
                                    Weeks Delayed <span class="text-danger">*</span>
                                </label>
                                <div class="input-group input-group-sm">
                                    @Html.EditorFor(x => x.delay, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control shadow-sm rounded-start",
                               @min = "1",
                               @id = "weeks_delayed",
                               @placeholder = "Enter number of weeks"
                           }
                       })
                                    <span class="input-group-text">Week(s)</span>
                                </div>
                                <small class="text-muted d-block mt-1">Only required if "Yes" is selected</small>
                                <small class="text-danger fst-italic" id="delay_note"></small>
                            </div>
                        </div>

                        <!-- desc -->
                        <div class="mb-3">
                            <label for="statusUpdate" class="form-label small text-secondary">
                                <i class="bi bi-chat-left-text me-1"></i>Description <span class="text-danger">*</span>
                            </label>
                            @Html.TextAreaFor(m => m.StatusUpdate, new
               {
                   @class = "form-control form-control-sm shadow-sm rounded-3",
                   @placeholder = "What was done, issues, notes...",
                   @rows = 3,
                   @id = "statusUpdate"
               })
                        </div>

                        <!-- File Upload -->
                        <div class="mb-3">
                            <label for="fileUpload" class="form-label small text-secondary">
                                <i class="bi bi-paperclip me-1"></i>Attachments <span class="text-danger">*</span>
                            </label>
                            <input type="file"
                                   name="fileUpload"
                                   id="fileUpload"
                                   accept=".pdf,.docx,.jpg"
                                   class="form-control form-control-sm shadow-sm rounded-2 py-1 px-2"
                                   style="font-size: 0.875rem; height: calc(1.5em + 0.5rem + 2px);"
                                   multiple />
                            <small class="text-muted mt-1 d-block">Accepted formats: PDF, DOCX, JPG</small>
                            <div id="uploadedFilesList" class="small text-muted mt-2"></div>
                        </div>


                        <!-- Validation -->
                        <div id="validationMessage" class="text-danger small fw-medium d-none">
                            Please fill out all required fields.
                        </div>

                        <!-- Submit Button -->
                        <div class="d-flex justify-content-end mt-4">
                            @*<button type="submit" class="btn btn-sm px-4 py-2 text-white"
                                    style="background-color: #66399A; border-radius: 0.6rem;"
                                    onclick="validateAndSubmit()"
                                    @(Model.IsArchived || Model.IsReadOnlyChecklistView ? "disabled style='opacity:0.5; cursor:not-allowed;'" : "")>
                                Submit
                            </button>*@

                            <button type="button" class="btn btn-purple"
                                    style="background-color: #6A0DAD; color: white; border: none; padding: 8px 16px; font-size: 14px;
           border-radius: 25px; width: 180px; display: block; margin: auto; text-align: center; font-weight: normal;
           transition: all 0.3s ease; box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);"
                                    onmouseover="this.style.backgroundColor='#570D8A'; this.style.boxShadow='2px 2px 12px rgba(0, 0, 0, 0.15)';"
                                    onmouseout="this.style.backgroundColor='#6A0DAD'; this.style.boxShadow='2px 2px 8px rgba(0, 0, 0, 0.1)';"
                                    onclick="validateAndSubmit()">
                                Submit
                            </button>

                        </div>
                    </form>
                </div>
            </div>
        </div>


    </div>

    <div class="table-container" id="detailsContainer">
        <h3>Project Members</h3>
        @if (Model.ProjectMembers.Any())
        {
            <div class="members-grid">
                @foreach (var member in Model.ProjectMembers)
                {
                    <div class="member-card shadow-sm p-3 mb-4 bg-white rounded">
                        <div class="d-flex align-items-center">
                            <div class="avatar-circle d-flex justify-content-center align-items-center">
                                <span class="avatar-initials">@member.Initials</span>
                            </div>
                            <div class="ml-3 member-details">
                                <p class="member-name font-weight-bold mb-1">@member.Name</p>
                                <p class="member-role text-muted mb-1">
                                    @switch (member.Role.ToString().ToLowerInvariant())
                                    {
                                        case "1":
                                            <span>Tester</span>
                                            break;
                                        case "2":
                                            <span>Editor</span>
                                            break;
                                        case "1004":
                                            <span>Project Manager</span>
                                            break;
                                        case "1005":
                                            <span>Viewer</span>
                                            break;
                                        default:
                                            <span>Unknown Role</span>
                                            break;
                                    }

                                </p>
                                <p class="member-email text-muted small">@member.Email</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="no-members-text text-center text-muted">No members are assigned to this project yet.</p>
        }
    </div>

    <div class="modal fade" id="statusUpdatedModal" tabindex="-1" role="dialog" aria-labelledby="statusUpdatedLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="statusUpdatedLabel">Success!</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Status Updated!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="activityLogModal" tabindex="-1" role="dialog" aria-labelledby="activityLogLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
            <div class="modal-content shadow-lg rounded-3">
                <div class="modal-header bg-white">
                    <h5 class="modal-title" id="activityLogLabel" style="color:black">Status Logs</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body bg-white p-4">
                    @if (Model.StatusLogs != null && Model.StatusLogs.Any())
                    {
                        foreach (var log in Model.StatusLogs)
                        {
                            <div class="log-entry mb-4 pb-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle text-white bg-secondary rounded-circle text-center" style="width: 36px; height: 36px; line-height: 36px; font-weight: bold;">
                                            @log.Username[0]
                                        </div>
                                        <p class="mb-0 ml-3 fw-semibold">@log.Username</p>
                                    </div>

                                    <p class="text-muted mb-0" style="font-size: 0.875rem;">
                                        @(
                                        DateTime.TryParse(log.DateUpdated, out var parsedDate)
                                        ? $"Updated on {parsedDate:MMMM dd, yyyy - hh:mm tt}"
                                        : "No Date"
                                        )
                                    </p>
                                </div>

                                <div class="ml-5">
                                    <p class="mb-1"><span class="fw-semibold">Milestone:</span> @log.MilestoneName</p>
                                    <p class="mb-1"><span class="fw-semibold">Description:</span> @log.Description</p>

                                    @if (!string.IsNullOrEmpty(log.Attachment))
                                    {
                                        <div class="mt-3 p-2 border rounded bg-light">
                                            <a href="@log.Attachment" target="_blank" class="d-inline-block mb-2 text-decoration-none">
                                                <i class="fas fa-paperclip me-1"></i>View Attachment
                                            </a>
                                            <br />
                                            <img src="@log.Attachment" alt="Attachment Preview" class="img-fluid rounded shadow-sm" style="max-height: 150px;" />
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <img src="~/AdminLTE-3.2.0/dist/img/ek.png" alt="No Logs" class="img-fluid mb-3" style="max-width: 150px;" />
                            <p>There aren't any status updates in this project yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="attachmentModal" tabindex="-1" role="dialog" aria-labelledby="attachmentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="attachmentModalLabel">Attachment Preview</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <iframe id="attachmentFrame" src="" style="width:100%; height:500px;" frameborder="0"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>


@*<div class="tab-pane fade" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">*@
<div class="tab-pane fade @(selectedTab == "timeline" ? "show active" : "")" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">
    <div class="card-container" id="gantt_container">
        <div class="table-container">
            <div class="gantt-header">
                <div class="gantt-view-controls">
                    <button id="day-view" class="gantt-view-btn active">Day</button>
                    <button id="week-view" class="gantt-view-btn">Week</button>
                    <button id="month-view" class="gantt-view-btn">Month</button>
                </div>
                <div>
                    <button id="maximize-btn" class="gantt-nav-btn"><i class="fa-solid fa-maximize"></i></button>
                    @*<button id="export-pdf-btn" class="gantt-nav-btn"><i class="fa-solid fa-file-export"></i> Export</button>*@
                </div>
            </div>
            <div id="gantt_here" style="width:100%; height:60vh;"></div>
            @*<div id="gantt_here" style="width:100%; height:60vh;"></div>*@
        </div>
    </div>
</div>


@*<div class="tab-pane fade" id="checklist" role="tabpanel" aria-labelledby="checklist-tab">*@
<div class="tab-pane fade @(selectedTab == "checklist" ? "show active" : "")" id="checklist" role="tabpanel" aria-labelledby="checklist-tab">
    <input type="text" id="main_id" value="@Model.MainId" hidden readonly />
    <input type="text" id="current_milestoneid" value="" hidden readonly />

    <div class="card shadow-sm p-4">
        <h3 class="text-center text-purple fw-bold">Checklist <span id="checklist_id_container"></span></h3>
        <input class="d-none" type="text" id="checklist_id_input" />
        @*<p class="text-center text-muted">Manage checklist for each milestone.</p>*@

        <div class="milestone-dropdown-container">
            <div class="input-group">
                <span class="input-group-text bg-purple text-white">
                    <i class="fas fa-tasks"></i>
                </span>
                <select id="milestoneDropdown" class="form-select shadow-sm">
                    <option value="">Select a Milestone</option>
                </select>
            </div>
        </div>


        <div class="table-responsive mt-4">
            <table class="table table-hover align-middle checklist-table" id="checklist_table">
                <thead class="table-purple text-white">
                    <tr>
                        <th></th>
                        <th>Required By</th>
                        <th>Checklist Items</th>
                        <th>Attachments</th>
                        <th>Approvers</th>
                        @*<th>Status</th>*@
                        <th>Action</th>
                        @*@if (!Model.IsReadOnlyChecklistView)
                        {
                            <th>Action</th>
                        }*@
                    </tr>
                </thead>
                <tbody id="checklistTableBody">
                    <tr>
                        <td colspan="7" class="text-center">
                            Choose a milestone to see its checklist items. <br />
                            <small>
                                <i class="fa fa-exclamation-circle text-warning"></i> = Pending
                                <br/>
                                <i class="fa-solid fa-circle-check text-success"></i> = Approved
                                <br />
                                <i class="fas fa-ban text-danger"></i> = Rejected
                            </small>
                        </td>
                    </tr>
                </tbody>
            </table>

            @{
                //if (Model.userDetails.JobLevel == 4035 || User.IsInRole("PMS_DIVISION_HEAD"))
                if (Model.ProjectDetails != null && Model.IsProjectManager)
                {

                    if (!Model.IsReadOnlyChecklistView)
                    {
                        <div class="text-center mt-3">
                            <button class="btn btn-purple btn-lg" id="add_optional" style="border-radius:30px;">Add Checklist Item</button>
                        </div>
                    }

                }
                @*if (!Model.IsReadOnlyChecklistView)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-purple btn-lg d-none" id="add_optional">
                                    <i class="fa fa-plus"></i> Checklist Item
                                </button>
                            </div>
                    }*@

            }
        </div>
    </div>
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog" style="margin: auto">

        <div class="modal-content" style="width: 100%">
            <div class="modal-header">
                <label id="modal_title"></label>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="optionalForm">
                    <input type="text" id="milestone_id" name="milestone_id" hidden readonly />
                    <input type="text" id="project_id" name="project_id" hidden readonly />
                    <table id="item_table">
                        <tbody>
                            <tr>
                                <th>No.</th>
                                <th>Checklist Item</th>
                                <th>Description</th>
                            </tr>

                            <tr>
                                <td>1</td>
                                <td><input type="text" name="item[0].title" /></td>
                                <td><input type="text" name="item[0].description" /></td>
                            </tr>

                        </tbody>

                    </table>
                </form>
            </div>

            <div style="margin: auto; text-align: center">
                <button class="btn-primary w-100" id="add_row" onclick="AddRow()">Add</button>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="submit_button">Save</button>
                <button type="button" class="btn btn-default" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="approverModal" role="dialog">
    <div class="modal-dialog" style="margin: auto">

        <div class="modal-content" style="width: 100%">
            <div class="modal-header">
                <label id="modal_title"></label>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <input type="text" id="task_id" hidden readonly />
                    <input type="text" id="approver_project_id" hidden readonly />
                    <label for="multiSelectDropdown">Members</label>
                    <div id="multiSelectDropdown" class="multi-select-dropdown">
                        <div class="dropdown-header" onclick="toggleDropdown()">Select Approvers</div>
                        <div class="dropdown-options" id="dropdown_options">
                            <input type="text" id="searchMembers" class="dropdown-search" placeholder="Search members..." oninput="filterMembers()" style="width: 100%" />
                            @*@foreach (var user in Model.Users)
                                {
                                    <div class="dropdown-item">
                                        <input type="checkbox" id="member_@user.Id" value="@user.Id" />
                                        <label for="member_@user.Id">@user.FirstName @user.LastName (@user.Email)</label>
                                    </div>
                                }*@
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Selected Approvers</label>
                    <div id="selectedMembersChips" class="selected-members-chips"></div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="submit_approver">Submit</button>
                <button type="button" class="btn btn-default" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="removeModal" role="dialog">
    <div class="modal-dialog" style="margin: auto; margin-left: 20%">

        <div class="modal-content" style="width: 140%">
            <div class="modal-header">
                <label id="modal_title"></label>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <input type="text" id="task_id_removal" hidden readonly />
                    <input type="text" id="approver_project_id_removal" hidden readonly />
                    <table id="approver_table" style="width: 100%">
                        <thead class="table-primary">
                            <tr style="margin:auto; text-align: center">
                                <th>Select All<br /><input type="checkbox" name="remove_all" id="remove_all" /></th>
                                <th>Name</th>
                                <th>Date Added</th>
                                <th>Added By</th>
                                @if (!Model.IsReadOnlyChecklistView)
                                {
                                    <th>Action</th>
                                }
                            </tr>
                        </thead>
                        <tbody id="approver_tbody"></tbody>
                    </table>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger w-25" onclick="removeSelected()">Remove Selected</button>
                @*<button type="button" class="btn btn-default" data-bs-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
    <script src="~/Scripts/moment.min.js"></script>

    <input type="hidden" id="fromApproval" value="@ViewBag.FromApproval" />
    <input type="hidden" id="checklistId" value="@ViewBag.ChecklistId" />
    <input type="hidden" id="currentUserEmail" value="@ViewBag.CurrentUserEmail" />

    @*const currentUserEmail = '@ViewBag.CurrentUserEmail'.toLowerCase().trim();
    const isFromApproval = '@ViewBag.FromApproval'.toLowerCase() === 'True';*@

    <script>
        //function loadActivityLogs() {
        //    const activityLogContainer = $('#activity-log-container');
        //    activityLogContainer.html('<p>Loading activity logs...</p>');

        //    $.ajax({
        //        url: '/Checklist/GetActivityLogs',
        //        type: 'GET',
        //        success: function (response) {
        //            activityLogContainer.html(response.data);
        //        },
        //        error: function () {
        //            activityLogContainer.html('<p>Failed to load activity logs. Please try again later.</p>');
        //        }
        //    });
        //}
   function validateAndSubmit() {
            const milestone = $('#selectedMilestone').val();
            const statusUpdate = $('#statusUpdate').val();
            const validationMessage = $('#validationMessage');

            validationMessage.hide();

            if (!milestone || !statusUpdate.trim()) {
                validationMessage.text('Please fill out all required fields.').show();
                return;
            }
            $('button[type="submit"]').prop('disabled', true);

            const formData = new FormData($('#updateStatusForm')[0]);
            for (const value of formData.values()) {
                console.log(value);
            }
            formData.append("attachment", fileUpload.files[0]);

            $.ajax({

                @*url: "@Url.Action("UploadFile", "FileUpload")",*@
                url: "@Url.Action("UpdateStatus", "Checklist")",

                type: 'POST',
                processData: false,
                contentType: false,
                cache: false,
                data: formData,
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Status Updated!',
                        text: 'Milestone status has been successfully updated.',
                    }).then(function(){
                        location.reload();
                    });

                    loadActivityLogs();
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Status Update Failed!',
                        text: 'An error occurred while updating the milestone status.',
                    });
                }
            });
        }
        $(document).ready(function () {
            // Make sure the submit button triggers the function
            $('#submitBtn').click(function () {
                validateAndSubmit();
            });
        });
        loadMilestones(@TempData["entry"]);
        const isReadOnlyView = @(Model.IsReadOnlyChecklistView.ToString().ToLower());

        //who is login
        const ownerApprover = "@(Model.ReadOnlyApprover)";
        //function loadMilestones(mainId) {
        //    $.ajax({
        //        url: "/Checklist/GetMilestonesWithApprovalTasks",
        //        type: "GET",
        //        data: { mainId },
        //        datatype: "json",
        //        success: function (response) {
        //            if (response.success) {
        //                //milestoneDropdown.empty().append('<option value="">Select a Milestone</option>');
        //                response.data.forEach(milestone => {
        //                    //milestoneDropdown.append(`<option value="${}">${response.data.milestone}</option>`);
        //                    $("#milestoneDropdown").append('<option value="'+ milestone.MilestoneId +'">' + milestone.MilestoneName + '</option>');
        //                });
        //                //$("#milestoneDropdown").append('<option>' + response.data[0].MilestoneName + '</option>');
        //            } else {
        //                Swal.fire("Error", "Failed to load milestones.", "error");
        //            }
        //        },
        //        error: function (xhr) {
        //            console.error("Error fetching milestones:", xhr.responseText);
        //        }
        //    });
        //}

         function loadMilestones(mainId) {
             $.ajax({
                 url: "/Checklist/GetMilestonesWithApprovalTasks",
                 type: "GET",
                 data: { mainId },
                 datatype: "json",
                 success: function (response) {
                     if (response.success) {
                         const dropdown = $("#milestoneDropdown");
                         dropdown.empty();

                         response.data.forEach(milestone => {
                             dropdown.append(`<option value="${milestone.MilestoneId}">${milestone.MilestoneName}</option>`);
                         });

                         const urlParams = new URLSearchParams(window.location.search);
                         const milestoneIdFromUrl = urlParams.get("milestone");

                         if (milestoneIdFromUrl && dropdown.find(`option[value='${milestoneIdFromUrl}']`).length > 0) {
                             dropdown.val(milestoneIdFromUrl).trigger("change");
                         }

                     } else {
                         Swal.fire("Error", "Failed to load milestones.", "error");
                     }
                 },
                 error: function (xhr) {
                     console.error("Error fetching milestones:", xhr.responseText);
                 }
             });
         }


        function loadTasksForMilestone(milestoneId, mainId) {
            const checklistTableBody = $("#checklistTableBody");
            const isFromApproval = $("#fromApproval").val() === "True";
            const currentUserEmail = $("#currentUserEmail").val();


            let item_ctr = 0;
            let saved_ctr = 0;
            let approval_enabled = 0;

            if (!milestoneId) {
                checklistTableBody.html(`
                    <tr>
                        <td colspan="7" class="text-center">
                            Select a milestone to view checklist items. <br />
                            <small>
                                <i class="fa fa-exclamation-circle text-warning"></i> = Pending,
                                <i class="fa fa-circle-check text-success"></i> = Approved,
                                <i class="fas fa-ban text-danger"></i> = Rejected
                            </small>
                        </td>
                    </tr>
                 `);
                return;
            }

            $.ajax({
                url: "/Checklist/GetTasksForMilestone",
                type: "GET",
                data: { milestoneId, mainId },
                success: function (response) {

                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);
                    const pId = urlParams.get("id");

                    checklistTableBody.empty();

                    if (response.success && response.data.length > 0) {
                        $("#checklist_id_container").text("ID # " + response.id);
                        $("#checklist_id_input").val(response.id);

                        let item_ctr = response.data.length;
                        let saved_ctr = 0;
                        let approval_enabled = 0;

                        response.data.forEach((task) => {
                            // skip rows na walang attachments pa from PM if readonly
                            if (isReadOnlyView && !task.attachment) return;

                            if (task.attachment && task.reason == null) saved_ctr++;
                            if (task.attachment && task.reason == null && task.approval_enabled == true) approval_enabled++;

                            let approversArray = Object.keys(task.approvers).map(key => {
                                const name = task.approvers[key];
                                const status = task.approver_status[key];
                                const approvedDate = task.approver_dates && task.approver_dates[key];
                                //const formattedDate = approvedDate
                                //    ? moment(approvedDate).format("MMM D, YYYY - h:mm A")
                                //    : "No action yet";

                                const tooltipText = status === true
                                    ? `Approved`
                                    : status === false
                                        ? `Rejected`
                                        : `Pending`;

                                const icon = status === true
                                    ? '<i class="fa fa-check text-success"></i>'
                                    : status === false
                                        ? '<i class="fa fa-ban text-danger"></i>'
                                        : '<i class="fa fa-exclamation-circle text-warning"></i>';

                                return `<span class="d-inline-block me-1" data-bs-toggle="tooltip" title="${tooltipText}">
                                ${icon} ${name}
                            </span>`;
                            });
                            setTimeout(() => {
                                $('[data-bs-toggle="tooltip"]').tooltip();
                            }, 100);


                            let collapsedApprovers = approversArray.slice(0, 2).join("<br/>");
                            let remainingApprovers = approversArray.slice(2).join("<br/>");

                            let approverHtml = `
                                <div class="approver-list">
                                    <div class="collapsed-approvers">${collapsedApprovers}</div>
                                    ${approversArray.length > 2 ? `
                                        <div class="more-approvers d-none">${remainingApprovers}</div>
                                        <a href="javascript:void(0);" class="toggle-approvers text-purple small">See More</a>
                                    ` : ''}
                                </div>
                            `;

                            // check allowed approver and render checkbox accordingly
                            const _allowedApproversArray = Object.entries(task.approvers)
                                .filter(([key, approver]) => approver === ownerApprover)
                                .map(([key]) => {
                                    const isApproved = task.approver_status[key];
                                    const disabledAttr = isApproved ? 'disabled' : '';

                                    return `
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox" name="taskSelect" data-task-id="${task.task_id}" data-milestone-id="${task.milestone_id}" value="${task.approvers[key]}" ${disabledAttr}>
                                            </label>
                                        </div>
                                    `;
                                });

                            checklistTableBody.append(`
    `)


                            checklistTableBody.append(`
                            <tr>
                           <td>
                            ${(task.optFlag && !isReadOnlyView) ? `
                                <button type="button" class="btn btn-danger rounded-pill p-2" style="min-width: 35px;" onclick="removeTask(${task.task_id})">
                                    <i class="fa fa-trash" aria-hidden="true"></i>
                                </button>
                            ` : ""}
                        </td>

                            <td>${task.optFlag ? "Project Manager" : "ODCP"}</td>
                            <td id="${task.task_id}name">${task.taskname}</td>
                            <td>
                                ${task.attachment
                                    ? `<a href="${task.attachment}" target="_blank">View Attachment</a>`
                                    : isReadOnlyView
                                        ? `<span class="text-muted">No file uploaded</span>`
                                        : `<input type="file" class="form-control-file" id="${task.task_id}file">`
                                }
                            </td>
                            <td>
                                ${task.approval_enabled
                                    ? approverHtml
                                    : task.optFlag
                                        ? (isReadOnlyView
                                            ? approverHtml
                                            : task.approvers.length > 0
                                                ? approverHtml + `<button class="btn btn-primary w-25" onclick="add_approverbtn(${task.task_id})">+</button> <button class="btn btn-danger w-25" onclick="removeApprover(${task.task_id})">-</button>`
                                                : `<button class="btn btn-primary w-50" onclick="add_approverbtn(${task.task_id})">+</button>`)
                                        : approverHtml
                                }
                            </td>


                            ${
                                isReadOnlyView
                                ? `<td>${_allowedApproversArray}</td>`

                                    : `<td>
                                        ${task.attachment
                                        ? task.approved
                                        ? `<button class="btn btn-sm btn-success" disabled>Approved</button>`
                                            : task.reason
                                                ? `<button class="btn btn-sm btn-danger" disabled>Rejected</button>`
                                                : task.approval_enabled
                                                    ? `<button class="btn btn-sm btn-warning" disabled>Saved</button>`
                                                    : `<button class="btn btn-sm btn-warning">Resubmit</button>`
                                        : `<button class="btn btn-sm btn-outline-success" onclick="submitApproval(${task.task_id})">Save</button>`
                                    }
                                    </td>`
                                }
                            <td class="d-none" id="${task.task_id}milestone">${task.milestone_id}</td>
                            <td class="d-none" id="${task.task_id}project">${pId}</td>
                            <td class="d-none" id="${task.task_id}type">${task.optFlag ? "optional" : "preset"}</td>
                            <td class="d-none" id="${task.task_id}id">${task.optFlag ? "optional" : "preset"}</td>
                        </tr>`);
                        });

                        // bulk approve and reject
                        if (isReadOnlyView) {
                            checklistTableBody.append(`
                            <tr id="bulkActionRow" style="display: none;">
                                <td colspan="7" class="text-center">
                                    <button class="btn btn-success w-25 me-2" style="border-radius: 30px;" onclick="bulkApproval()" id="btnBulkApproval">Approve</button>
                                    <button class="btn btn-danger w-25" style="border-radius: 30px;" onclick="bulkReject()" id="btnBulkReject">Reject</button>
                                </td>
                            </tr>
                        `);
                        }


                        response.data.forEach((task) => {
                            if (isReadOnlyView && task.attachment && !task.approved && !task.reason) {
                                let tooltipHtml = Object.keys(task.approvers).map(key => {
                                    let status = task.approver_status[key];
                                    let icon = status === true
                                        ? '<i class="fa fa-check text-success"></i>'
                                        : status === false
                                            ? '<i class="fa fa-ban text-danger"></i>'
                                            : '<i class="fa fa-exclamation-circle text-warning"></i>';
                                    return `${icon} ${task.approvers[key]}`;
                                }).join("<br/>");

                                $(`.pending-approver-tooltip[data-task-id = "${task.task_idi}"]`).tooltip({
                                    tooltip: tooltipHtml,
                                    html: true,
                                    placement: 'top'

                                });
                            }
                        });

                        checklistTableBody.off('click', '.toggle-approvers').on('click', '.toggle-approvers', function () {
                            const parent = $(this).closest('.approver-list');
                            parent.find('.more-approvers').toggleClass('d-none');
                            $(this).text($(this).text() === 'See More' ? 'See Less' : 'See More');
                        });

                        if (!isReadOnlyView && item_ctr === saved_ctr && item_ctr != approval_enabled) {
                            checklistTableBody.append(`
                        <tr>
                            <td colspan="7" class="text-center">
                                <button class="btn btn-success w-25" onclick="notifyApprovers(${response.id})" id="approval_btn">Submit for Approval</button>
                            </td>
                        </tr>
                    `);
                        }

                    //        checklistTableBody.append(`
                    //    <tr>
                    //        <td colspan="7" class="text-center">
                    //            <button class="btn btn-success w-25" onclick="notifyApprovers(${response.id})" id="approval_btn">Submit for Approval</button>
                    //        </td>
                    //    </tr>
                    //`);


                    } else {
                        checklistTableBody.html(`
                <tr>
                    <td colspan="7" class="text-center">No tasks found for this milestone.</td>
                </tr>
            `);
                        //$("#add_optional").remove();
                    }

                    if (item_ctr == saved_ctr && item_ctr > 0 && item_ctr != approval_enabled) {
                        $("#checklistTableBody ").append(`<tr><td colspan="7"><button class="btn btn-success w-25" onclick="notifyApprovers(${response.id})">Submit for Approval</button></td></tr>`)
                    }
                },
                error: function (xhr) {
                    console.error("Error fetching tasks:", xhr.responseText);
                }
            });
        }


function bulkApproval() {
    var checkboxes = $('input[name="taskSelect"]:not(:disabled)');
    var allChecked = checkboxes.length > 0 && checkboxes.length === checkboxes.filter(':checked').length;

    if (allChecked) {
        var checkedTasks = [];

        $('input[name="taskSelect"]:checked').each(function () {
            checkedTasks.push({
                taskId: $(this).data('task-id'),
                milestoneId: $(this).data('milestone-id'),
                approver: $(this).val()
            });
        });

        Swal.fire({
            title: "You're about to approve these checklist items.",
            html: `<p style="font-size: 15px; color: #555;">Please confirm bulk approval of selected items.</p>`,
            icon: "question",
            showDenyButton: true,
            confirmButtonText: "Yes",
            denyButtonText: "No",
            confirmButtonColor: "#66339A",
            background: "#fff",
            color: "#333"
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("BulkApproved", "Checklist")",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ tasks: checkedTasks }),
                    success: function (res) {
                        if (res.success) {
                            triggerConfetti(); 
                            Swal.fire({
                                title: "Tasks Approved 🎉",
                                text: "Selected checklist items have been successfully approved.",
                                icon: "success",
                                timer: 3000,
                                timerProgressBar: true,
                                showConfirmButton: false,
                                background: "#ffffff",
                                color: "#333"
                            }).then(function () {
                                const milestoneDropdown = $("#milestoneDropdown");
                                const milestone = milestoneDropdown.length ? milestoneDropdown.val() : null;

                                localStorage.setItem('currentTab', 'checklist');
                                if (milestone) {
                                    localStorage.setItem('currentDrop', milestone);
                                }

                                location.reload();
                            });
                        } else {
                            Swal.fire("Approval failed", res.message || "Please try again.", "error");
                        }
                    },
                    error: function () {
                        Swal.fire("Error", "Something went wrong while approving tasks.", "error");
                    }
                });
            } else if (result.isDenied) {
                Swal.fire("Action cancelled", "No checklist item was approved.", "info");
            }
        });

    } else {
        Swal.fire("No checklist item selected", "Please select tasks to approve.", "info");
    }
}



        function submitApproval(task_id) {
            var inputFile = $("#" + task_id + "file");
            var inputName = $("#" + task_id + "name");
            var inputMilestone = $("#" + task_id + "milestone");
            var inputProject = $("#" + task_id + "project");
            var inputType = $("#" + task_id + "type");

            var fileupload = inputFile.get(0);

            var taskname = inputName.text();

            var taskmilestone = inputMilestone.text();
            var taskproject = inputProject.text();
            var tasktype = inputType.text();

            var files = fileupload.files;

            var fileData = new FormData();

            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            fileData.append("name", taskname);
            fileData.append("id", task_id);
            fileData.append("milestone_id", taskmilestone);
            fileData.append("project_id", taskproject);
            fileData.append("type", tasktype);

            $.ajax({
                type: "POST",
                url: "@Url.Action("UploadFile", "FileUpload")",
                contentType: false,
                processData: false,
                data: fileData,
                success: function (res) {
                    if (res.message == "success") {
                        Swal.fire({
                            icon: 'success',
                            title: 'Uploaded',
                            text: 'File Uploaded Successfully!',
                        }).then(function () {
                            location.reload();
                        });
                    }

                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: 'File Upload Failed!',
                        });
                    }
                }
            });
        }

        function AddRow() {
            var num = $('#item_table tr:last-child td:first-child').html();
            var item_num = parseInt(num) + 1;
            var inc_num = num;

            $('#item_table tbody').append(`
        <tr style="margin:auto; text-align: center">
        <td>${item_num}</td>
        <td><input type="text" name='item[${inc_num}].title'/></td>
        <td><input type="text" name='item[${inc_num}].description' /></td>
        </tr>
        `);
        }

        function add_approverbtn(id) {
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);
            const projectID = urlParams.get("id");

            $(".modal-body").html();
            $("#approverModal").modal("show");
            $("#task_id").val(id);
            $("#approver_project_id").val(projectID);

            $.ajax({
                type: "POST",
                url: "@Url.Action("GetUserList", "Checklist")",
                success: function (res) {
                    const dropdown = document.getElementById("dropdown_options");

                    res.data.forEach(function (element) {
                        const approverDiv = document.createElement("div");
                        approverDiv.classList.add("dropdown-item");

                        const approverInput = document.createElement("input");
                        approverInput.type = "checkbox";
                        approverInput.id = "id_" + element.Id;
                        approverInput.value = element.Id;

                        const approverLabel = document.createElement("label");
                        approverLabel.innerHTML = element.FirstName + " " + element.LastName + " ";

                        dropdown.append(approverDiv);
                        approverDiv.append(approverInput);
                        approverDiv.append(approverLabel);
                        //console.log(element.Id);
                    });
                }

            });
        }

        function toggleDropdown() {
            const dropdown = document.getElementById('multiSelectDropdown');
            dropdown.classList.toggle('open');
        }

        function updateSelectedChips() {
            const checkboxes = document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]');
            const chipsContainer = document.getElementById('selectedMembersChips');
            chipsContainer.innerHTML = '';

            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    const chip = document.createElement('div');
                    chip.className = 'chip';

                    chip.innerHTML = `
                    ${checkbox.nextElementSibling.textContent}
                    <button class="remove-chip" onclick="removeChip('${checkbox.id}')">&times;</button>
                `;

                    chipsContainer.appendChild(chip);
                    chip.setAttribute("data-value", checkbox.value);
                }
            });
        }

        function removeChip(memberId) {
            const checkbox = document.getElementById(memberId);
            checkbox.checked = false;
            updateSelectedChips();
        }


        function removeApprover(taskID) {
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);
            const projectID = urlParams.get("id");

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetApprover", "Checklist")",
                data: { "main_id": projectID, "milestone_id": taskID},
                success: function (res) {
                    $(".modal-body").html();
                    $("#removeModal").modal("show");

                    //const table_body = document.getElementById("approver_tbody");
                    const table_body = $("#approver_tbody");
                    $("#task_id_removal").val(taskID);
                    $("#approver_project_id_removal").val(projectID);

                    table_body.empty();

                    res.data.forEach(approver => {

                        table_body.append(`
                        <tr>
                        <td><input type="checkbox" name="cb_remove" value="${approver.employee_id}"></input></td>
                        <td>${approver.approver_name}</td>
                        <td>${moment(approver.date_added).format('MM-DD-yyyy')}</td>
                        <td>${approver.added_by.split("@@")[0]}</td>
                        <td><button type="button" class="bg-danger" onclick=dbRemoveApprover(${approver.employee_id})><i class="fa-solid fa-trash-can"></i></button></td>
                        </tr>
                        `)
                    });

                }
            });
        }

        function dbRemoveApprover(userID) {
            const projID = $("#approver_project_id_removal").val();
            const milestoneID = $("#task_id_removal").val();
            const milestone = $("#milestoneDropdown").val();


            Swal.fire({
                title: "Are you sure?",
                showDenyButton: true,
                confirmButtonText: "Yes",
                denyButtonText: `No`
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    $.ajax({
                type: "POST",
                url: "@Url.Action("RemoveOptionalApprover", "Checklist")",
                data: { "id": userID, "project_id":projID, "milestone_id":milestoneID },
                success: function (res) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Approver Removed!',
                    }).then(function () {
                        localStorage.setItem('currentTab', 'checklist');
                        localStorage.setItem('currentDrop', milestone);

                        location.reload();

                        //setTimeout(function () {
                        //    location.reload();
                        //}, 1000)
                        });
                }
            });
                } else if (result.isDenied) {
                    Swal.fire("Changes are not saved", "", "info");
                }
                });


        }

        function removeTask(id) {

            Swal.fire({
                title: "Are you sure you want to delete this Checklist Item?",
                showDenyButton: true,
                confirmButtonText: "Yes",
                denyButtonText: `No`
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                type: "POST",
                url: "@Url.Action("RemoveOptionalTask", "Checklist")",
                data: { "id": id },
                success: function (res) {
                    Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Checklist item removed!',
                    }).then(function () {
                        var milestone = $("#milestoneDropdown").val();
                            localStorage.setItem('currentTab', 'checklist');
                            localStorage.setItem('currentDrop', milestone);

                            location.reload();

                            //setTimeout(function () {
                            //    location.reload();
                            //}, 1000)
                        });
                }
            });
                } else if (result.isDenied) {
                    Swal.fire("Changes are not saved", "", "info");
                }
                });
        }

        function filterMembers() {
            const searchInput = document.getElementById('searchMembers').value.toLowerCase();
            const items = document.querySelectorAll('.multi-select-dropdown .dropdown-item');

            items.forEach(item => {
                const text = item.querySelector('label').innerText.toLowerCase();
                item.style.display = text.includes(searchInput) ? '' : 'none';
            });
        }

        function removeSelected() {
            const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="cb_remove"]`);
            const projID = $("#approver_project_id_removal").val();
            const milestoneID = $("#task_id_removal").val();

            checkboxes.forEach((ele, index, array) => {
                if (ele.checked) {
                    $.ajax({
                        url: "@Url.Action("RemoveOptionalApprover", "Checklist")",
                        type: "POST",
                        data: { "id": ele.value, "project_id": projID, "milestone_id": milestoneID },
                        success: function () {

                        }
                    })
                }

                if (array.length - 1 === index) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Approvers Removed!',
                    }).then(function () {
                        location.reload();
                    });
                }
            });
        }

        function notifyApprovers(checklist_id) {
            let projectID = $("#main_id").val();
            let milestoneID = $("#current_milestoneid").val();

            $.ajax({
                url: "@Url.Action("NotifyApprovers", "Checklist")",
                type: "POST",
                data: { "cID": checklist_id, "pID": projectID, "mID": milestoneID },
                success: function (res) {
                    if (res.message == "success") {
                        alert("success");
                    }

                    else {
                        alert(res.message);
                    }
                }
            });
        }
    </script>

    <script>
        $(function () {
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                const selectedTab = $(e.target).attr('href').substring(1);
                const url = new URL(window.location);
                url.searchParams.set('tab', selectedTab);
                window.history.replaceState({}, '', url);
            });
        });
        $('#timeline-tab').on('shown.bs.tab', function () {
            gantt.render();
        });


    </script>

    <script>
        
        document.addEventListener("DOMContentLoaded", function () {
            gantt.config.xml_date = "%Y-%m-%d %H:%i";
            gantt.config.readonly = true;
            gantt.config.columns = [
                { name: "key_person", label: "Key Person", align: "center", width: 90 },
                { name: "text", label: "Milestone", tree: true, width: 200 },
                { name: "duration", label: "Duration", align: "center", width: 70 },
                { name: "start_date", label: "Start", align: "center", width: 90 },
                { name: "end_date", label: "Finish", align: "center", width: 90 }
            ];
            gantt.config.scales = [
                { unit: "week", date: "Week %W" }
            ];

            gantt.templates.task_text = function () {
                return "";
            };

            gantt.init("gantt_here");
            @*gantt.load(`/Checklist/getGanttData?id=@TempData["entry"]`, "json");*@
            gantt.load(`getGanttData?id=@TempData["entry"]`, "json");

            gantt.load(`/Checklist/getGanttData?id=@TempData["entry"]`, "json"); // added to be deleted too


        const setDayView = () => {
            gantt.config.scales = [
                    { unit: "day", step: 1, date: "%d" },
                    { unit: "week", date: "Week %W" }
                ];
            gantt.render();
        };


        const setWeekView = () => {
            gantt.config.scales = [
                    { unit: "week", step: 1, date: "WW %W" },
                    { unit: "month", step: 1, date: "%F %Y" }
                ];
            gantt.render();
        };

        const setMonthView = () => {
            gantt.config.scales = [
                    { unit: "month", step: 1, date: "%F %Y" },
                    { unit: "year", step: 1, date: "%Y" }
                ];
            gantt.render();
        };

        document.querySelector("#day-view").addEventListener("click", () => {
            setDayView();
            activateButton("day-view");
        });

        document.querySelector("#week-view").addEventListener("click", () => {
            setWeekView();
            activateButton("week-view");
        });

        document.querySelector("#month-view").addEventListener("click", () => {
            setMonthView();
            activateButton("month-view");
        });

        const activateButton = (buttonId) => {
            document.querySelectorAll(".gantt-view-btn").forEach((btn) => {
                btn.classList.remove("active");
            });
            document.getElementById(buttonId).classList.add("active");
        };

        document.querySelector("#maximize-btn").addEventListener("click", function () {
        const projectId = "@TempData["entry"]";
        window.open(`/Checklist/GanttChart?id=${projectId}`, "_blank");
        });


            $("#timeline-tab").on("click", function () {
                $("#detailsContainer").css("display", "none");
                $("#overview").css("display", "none");
                $("#checklist").css("display", "none");
                $("#timeline").css("display", "block");
            });

            $("#overview-tab").on("click", function () {
                $("#detailsContainer").css("display", "block");
                $("#overview").css("display", "block");
                $("#checklist").css("display", "none");
                $("#timeline").css("display", "none");
            });

            $("#checklist-tab").on("click", function () {
                $("#detailsContainer").css("display", "none");
                $("#overview").css("display", "none");
                $("#checklist").css("display", "block");
                $("#timeline").css("display", "none");

            });

            setWeekView();
            activateButton("week-view");

            //loadActivityLogs();

            var tab = localStorage.getItem('currentTab');
            var dropdown = localStorage.getItem('currentDrop');

            if (tab == "checklist") {
                const element = document.getElementById("milestoneDropdown");
                document.getElementById("checklist-tab").click();
                setTimeout(function () {
                    document.getElementById("milestoneDropdown").value = dropdown;
                    document.getElementById("milestoneDropdown").dispatchEvent(new Event('change'));
                },1000)

                localStorage.clear();
            }

            $("#remove_all").on("click", function () {
                $("input[name='cb_remove']").prop("checked", this.checked);
            });
        });

        const selectedTab = new URLSearchParams(window.location.search).get("tab");

        if (selectedTab === "timeline") {
            $("#timeline").addClass("show active").css("display", "block");
            $("#overview").removeClass("show active").css("display", "none");
            $("#checklist").removeClass("show active").css("display", "none");
            $("#detailsContainer").css("display", "none");

            setTimeout(() => {
                gantt.render();
                document.getElementById("gantt_here").scrollIntoView({ behavior: "smooth" });
            }, 200);
        }

        const urlTab = new URLSearchParams(window.location.search).get("tab");

        if (urlTab === "timeline" || urlTab === "checklist" || urlTab === "overview") {

            $(".tab-pane").removeClass("show active").hide();
            $("#" + urlTab).addClass("show active").show();

            $(".nav-link").removeClass("active");
            $("#" + urlTab + "-tab").addClass("active");

            if (urlTab === "checklist") {
                $("#detailsContainer").hide();
            } else if (urlTab === "timeline") {
                $("#detailsContainer").hide();
                setTimeout(() => gantt.render(), 200);
            } else {
                $("#detailsContainer").show();
            }
        }
    </script>

<script>
        const urlParams = new URLSearchParams(window.location.search);
        const milestoneIdFromUrl = urlParams.get("milestone");

        if (milestoneIdFromUrl) {
            const $dropdown = $("#milestoneDropdown");

            $("#checklist_id_container").hide(); // hide before fadeIn

            setTimeout(() => {
                if ($dropdown.find(`option[value='${milestoneIdFromUrl}']`).length > 0) {
                    $dropdown.val(milestoneIdFromUrl).trigger("change");

                    // fade in after milestone is applied
                    setTimeout(() => {
                        $("#checklist_id_container").fadeIn(300);
                    }, 150);
                }
            }, 200);
        }

    $(document).ready(function () {
        const mainId = '@(TempData["entry"] ?? "null")';
        if (mainId === "null") {
            console.error("mainId is not set. Please check your TempData.");
            return;
        }

        const urlParams = new URLSearchParams(window.location.search);
        const milestoneIdFromUrl = urlParams.get("milestone");

        if (milestoneIdFromUrl) {
            const $dropdown = $("#milestoneDropdown");

            $("#checklist_id_container").hide(); // hide before fadeIn

            setTimeout(() => {
                if ($dropdown.find(`option[value='${milestoneIdFromUrl}']`).length > 0) {
                    $dropdown.val(milestoneIdFromUrl).trigger("change");

                    // fade in after milestone is applied
                    setTimeout(() => {
                        $("#checklist_id_container").fadeIn(300);
                    }, 150);
                }
            }, 200);
        }
    });

    $("#milestoneDropdown").on("change", function () {
        const milestoneId = $(this).val();

        $("#checklist_id_container").fadeOut(100, function () {
            $(this).empty();
        });
        $("#checklist_id_input").val("");
        $("#current_milestoneid").empty();
        $("#current_milestoneid").val(milestoneId);

        if (milestoneId !== "") {
            $("#add_optional").removeClass("d-none");
        } else {
            $("#add_optional").addClass("d-none");
        }

        loadTasksForMilestone(milestoneId, @(TempData["entry"]));

        // fade in after slight delay for smoother UI
        setTimeout(() => {
            $("#checklist_id_container").fadeIn(300);
        }, 150);
    });

    $("#delayed_yes").on("click", function () {
        $("#delay_input_group").removeClass("d-none").prop("class", "form-group mb-4");
    });

    $("#delayed_no").on("click", function () {
        $("#delay_input_group").addClass("d-none");
        $("#weeks_delayed").val(0);
    });

    $("#selectedMilestone").on("change", function () {
        const selection = $(this).val();
        if (selection !== "") {
            $("#status_input_group").removeClass("d-none");

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetTaskUpdate", "Checklist")",
                data: { selection },
                success: function (res) {
                    const note = document.getElementById("delay_note");
                    const inputGrp = document.getElementById("delay_input_group");

                    if (res.success === true) {
                        if (res.data !== 0) {
                            $("#delayed_yes").prop("checked", true);
                            $("#weeks_delayed").val(res.data);
                            $("#delay_div").removeClass("d-none");
                            inputGrp.classList.remove("d-none");
                            note.textContent = "Previously Delayed by: " + res.data + " week/s";
                        } else {
                            $("#delayed_no").prop("checked", true);
                            $("#weeks_delayed").val(0);
                            $("#delay_div").removeClass("d-none");
                            inputGrp.classList.add("d-none");
                        }
                    } else {
                        alert(res.message);
                    }
                }
            });
        } else {
            $("#status_input_group").addClass("d-none");
        }
    });

    $(document).on("click", "#add_optional", function (e) {
        e.preventDefault();
        const urlParams = new URLSearchParams(window.location.search);
        const projectID = urlParams.get("id");
        const milestone = $("#milestoneDropdown").val();

        if (milestone !== "") {
            $("#modal_title").text("Checklist item for: " + milestone);
            $("#milestone_id").val(milestone);
            $("#project_id").val(projectID);
            $(".modal-body").html();
            $("#myModal").modal("show");
        } else {
            Swal.fire("Oops", "Please select a milestone first.", "error");
        }
    });

    $(document).on("click", "#submit_button", function () {
        const formData = $("#optionalForm").serialize();
        let incomplete = false;
        const milestone = $("#milestoneDropdown").val();

        $('#optionalForm :input').each(function () {
            if ($(this).val().length === 0) {
                incomplete = true;
                return false;
            }
        });

        if (!incomplete) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("AddOptional", "Checklist")",
                data: formData,
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Checklist item added!',
                    }).then(function () {
                        localStorage.setItem('currentTab', 'checklist');
                        localStorage.setItem('currentDrop', milestone);
                        location.reload();
                    });
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Query failed, please retry',
                    }).then(function () {
                        localStorage.setItem('currentTab', 'checklist');
                        localStorage.setItem('currentDrop', milestone);
                        location.reload();
                    });
                }
            });
        } else {
            Swal.fire("Incomplete Entry", "Please fill up the form.", "error");
        }
    });

    document.addEventListener('change', function (event) {
        if (event.target.matches('.multi-select-dropdown input[type="checkbox"]')) {
            updateSelectedChips();
        }
    });

    $(document).on("click", "#submit_approver", function () {
        const taskID = $("#task_id").val();
        const projID = $("#approver_project_id").val();
        const milestoneID = $("#checklist_id_input").val();
        const selectedMembers = [...document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked')].map(e => e.value);
        const milestone = $("#milestoneDropdown").val();

        if (selectedMembers.length > 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("AddApproverOpt", "Checklist")",
                data: {
                    id: taskID,
                    proj_id: projID,
                    approvers: selectedMembers,
                    milestone_id: milestoneID
                },
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Approver/s Added!',
                    }).then(function () {
                        localStorage.setItem('currentTab', 'checklist');
                        localStorage.setItem('currentDrop', milestone);
                        location.reload();
                    });
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'No selected approvers',
                text: 'Please select an approver first',
            }).then(function () {                                                                                     
                localStorage.setItem('currentTab', 'checklist');
                localStorage.setItem('currentDrop', milestone);
                location.reload();
            });
        }
        const approverBadges = task.approvers.map(approver => {
            const tooltip = `${approver.status.charAt(0).toUpperCase() + approver.status.slice(1)} on ${approver.date}`;
            const badgeColor = approver.status === 'approved' ? 'success'
                : approver.status === 'rejected' ? 'danger'
                    : 'secondary';
            return `<span class="badge bg-${badgeColor} me-1" data-bs-toggle="tooltip" title="${tooltip}">
                ${approver.name}
            </span>`;
        }).join('');

    });
    $(document).on('change', 'input[name="taskSelect"]', function () {
        const anyChecked = $('input[name="taskSelect"]:checked').length > 0;
        $('#bulkActionRow').toggle(anyChecked);
    });
    function triggerConfetti() {
        const confettiCanvas = document.createElement('canvas');
        confettiCanvas.style.position = 'fixed';
        confettiCanvas.style.top = 0;
        confettiCanvas.style.left = 0;
        confettiCanvas.style.width = '100vw';
        confettiCanvas.style.height = '100vh';
        confettiCanvas.style.pointerEvents = 'none';
        confettiCanvas.style.zIndex = 11000;
        document.body.appendChild(confettiCanvas);

        const myConfetti = confetti.create(confettiCanvas, {
            resize: true,
            useWorker: true
        });

        myConfetti({
            particleCount: 80,
            spread: 70,
            origin: { y: 0.6 },
            colors: ['#66339A', '#A066C9', '#FFD700', '#88D8B0']
        });

        setTimeout(() => {
            document.body.removeChild(confettiCanvas);
        }, 5000);
    }
</script>                           
    

}
