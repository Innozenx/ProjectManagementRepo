@model ProjectManagementSystem.Models.Onboarding
@{
    ViewBag.Title = "Invite Teammates";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="content">
    <div class="form-container">
        <div class="form-header">
            <div class="icon">
                <img src="~/AdminLTE-3.2.0/dist/img/giphy.jpg" alt="princesses">
            </div>
            <h3>Invite your Teammates</h3>
            <p>Select a project to assign team members and their roles to join  your project.</p>

        </div>
        <div class="form-content">
            <div class="form-group">
                <label for="projectDropdown">Project title</label>
                <select id="projectDropdown" class="form-select" required>
                    <option value="" disabled selected>Choose a project...</option>
                    @foreach (var project in Model.Projects)
                    {
                        <option value="@project.Id">@project.Title</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="multiSelectDropdown">Members</label>
                <div id="multiSelectDropdown" class="multi-select-dropdown">
                    <div class="dropdown-header" onclick="toggleDropdown()">Select Members</div>
                    <div class="dropdown-options">
                        <input type="text" id="searchMembers" class="dropdown-search" placeholder="Search members..." oninput="filterMembers()" />
                        @foreach (var user in Model.Users)
                        {
                            <div class="dropdown-item">
                                <input type="checkbox" id="member_@user.Id" value="@user.Id" />
                                <label for="member_@user.Id">@user.FirstName @user.LastName (@user.Email)</label>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>People with Access</label>
                <div id="selectedMembersChips" class="selected-members-chips"></div>
            </div>
        </div>

      
        <div class="button-container">
            <button id="inviteButton" type="button" class="btn-primary" onclick="submitInvitations()">Send Invites</button>
        </div>
    </div>
</div>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f4f6f9;
    }

    .content {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .form-container {
        width: 600px;
        padding: 40px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .form-header {
        text-align: center;
    }

        .form-header h3 {
            font-size: 1.8rem;
            color: #66339A;
        }

        .form-header p {
            font-size: 1rem;
            color: #666;
        }

    .form-group {
        margin-bottom: 20px;
    }

    .button-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .btn-primary {
        background-color: #470A67;
        color: #fff;
        padding: 8px 50px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #2d5bb8;
        }

    .multi-select-dropdown {
        position: relative;
        background: #fff;
        cursor: pointer;
    }

        .multi-select-dropdown .dropdown-header {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
            font-size: 0.9rem;
            color: #333;
        }

        .multi-select-dropdown .dropdown-options {
            display: none;
            position: absolute;
            z-index: 10;
            width: 100%;
            max-height: 250px;
            overflow-y: auto;
            background: #fff;
            border: 1px solid #ccc;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 0 0 5px 5px;
            margin-top: 5px;
            padding: 10px;
        }

        .multi-select-dropdown.open .dropdown-options {
            display: block;
        }

    .dropdown-item {
        padding: 8px 0;
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 14px;
        color: #333;
        font-weight: normal;
    }

        .dropdown-item input[type="checkbox"] {
            margin-right: 10px;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .dropdown-item label {
            margin: 0;
            line-height: 1.5;
            cursor: pointer;
        }


    .selected-members-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        padding: 10px;
        background: #f4f6f9;
        border: 1px solid #ccc;
        border-radius: 5px;
        min-height: 50px;
        max-height: 150px;
        overflow-y: auto;
    }

        .selected-members-chips .chip {
            background-color: #66339A;
            color: white;
            padding: 6px 10px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .selected-members-chips .chip .remove-chip {
                margin-left: 10px;
                cursor: pointer;
                background: transparent;
                border: none;
                color: white;
            }

    .role-dropdown {
        margin-left: 10px;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 0.85rem;
    }

    .dropdown-search {
        width: 100%;
        padding: 8px;
        font-size: 0.9rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
        box-sizing: border-box;
        background-color: #fff;
        color: #333;
    }

        .dropdown-search:focus {
            outline: none;
            border-color: #470A67;
            background-color: #f9f4ff;
        }
    .icon img {
        width: 200px;
        /*margin-bottom: 20px;*/
    }
    .form-select {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #fff;
        font-size: 14px;
        color: #333;
        outline: none;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .form-select:focus {
            border-color: #470A67;
            box-shadow: 0 0 5px rgba(71, 10, 103, 0.4);
        }

        .form-select option {
            padding: 10px;
            background-color: #fff;
            color: #333;
            font-size: 14px;
        }

    .custom-message {
        margin-top: 5px;
        font-size: 12px;
        color: #666;
        font-style: italic;
    }

        .custom-message.important {
            color: #e63946;
            font-weight: bold;
        }

        @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
        
    }
</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let availableRoles = @Html.Raw(Json.Encode(Model.Roles));

    function toggleDropdown() {
        const dropdown = document.getElementById('multiSelectDropdown');
        dropdown.classList.toggle('open');
    }

    function filterMembers() {
        const searchInput = document.getElementById('searchMembers').value.toLowerCase();
        const items = document.querySelectorAll('.multi-select-dropdown .dropdown-item');

        items.forEach(item => {
            const text = item.querySelector('label').innerText.toLowerCase();
            item.style.display = text.includes(searchInput) ? '' : 'none';
        });
    }

    function createRoleDropdown(memberId) {
        //let roleDropdown = `<select class="role-dropdown" id="role_${memberId}">`;
        let roleDropdown = `<select class="role-dropdown" id="role">`;
        availableRoles.forEach(role => {
            roleDropdown += `<option value="${role.Id}">${role.RoleName}</option>`;
        });
        roleDropdown += `</select>`;
        return roleDropdown;
    }

    function updateSelectedChips() {
        const checkboxes = document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]');
        const chipsContainer = document.getElementById('selectedMembersChips');
        chipsContainer.innerHTML = '';

        checkboxes.forEach(checkbox => {
            if (checkbox.checked) {
                const chip = document.createElement('div');
                chip.className = 'chip';

                chip.innerHTML = `
                    ${checkbox.nextElementSibling.textContent}
                    ${createRoleDropdown(checkbox.value)}
                    <button class="remove-chip" onclick="removeChip('${checkbox.id}')">&times;</button>
                `;

                chipsContainer.appendChild(chip);
                chip.setAttribute("data-value", checkbox.nextElementSibling.textContent);
            }
        });
    }

    function removeChip(memberId) {
        const checkbox = document.getElementById(memberId);
        checkbox.checked = false;
        updateSelectedChips();
    }

    function submitInvitations() {
        const selectedProject = document.getElementById('projectDropdown').value;
        if (!selectedProject) {
            alert("Please select a project.");
            return;
        }

        const selectedMembers = Array.from(document.querySelectorAll('.multi-select-dropdown input[type="checkbox"]:checked'))
            .map(checkbox => {
                const role = document.getElementById(`role_${checkbox.value}`).value;
                return {
                    id: checkbox.value,
                    role: role
                };
            });

        if (selectedMembers.length === 0) {
            alert("Please select at least one teammate and assign roles.");
            return;
        }

        const notify = document.getElementById('notifyCheckbox').checked;
        const message = document.getElementById('messageBox').value;

        const payload = {
            projectId: selectedProject,
            members: selectedMembers,
            notify: notify,
            message: message
        };

        $.ajax({
            url: '/Checklist/SubmitInvitations',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            success: function (response) {
                if (response.status) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Status Updated!',
                        text: 'Milestone status has been successfully updated.',
                    });
                    location.reload();
                }
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Update Failed',
                    text: 'An error occurred while sending invitations.',
                });
            }
        });
    }

    document.addEventListener('change', function (event) {
        if (event.target.matches('.multi-select-dropdown input[type="checkbox"]')) {
            updateSelectedChips();
        }
    });

    $("#inviteButton").on("click", function () {
        const chips = document.getElementsByClassName("chip");
        const roles = document.querySelectorAll("#role");
        let userArr = [];
        let roleArr = [];
        let project = document.getElementById("projectDropdown").value;

        for (i = 0; i < chips.length; i++) {
            //alert(chips.item(i).getAttribute("data-value"));
            //alert(chips.item(i).getAttribute("data-value") + "with role: " + roles[i].value);
            userArr[i] = chips.item(i).getAttribute("data-value");
            roleArr[i] = roles[i].value
        };

        $.ajax({
            url: "@Url.Action("EmailInvitees", "Checklist")",
            type: "POST",
            data: {"users": userArr, "roles": roleArr, "project": project},
            success: function (res) {
                if (res.message == "Success") {

                        Swal.fire({
                            icon: 'success',
                            title: 'Status Updated!',
                            text: 'Milestone status has been successfully updated.',
                        });
                        location.reload();

                }

                else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: 'An error occurred while sending invitations.' + res.message,
                    });
                }
            }
        });
    });
</script>
